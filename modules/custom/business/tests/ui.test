<?php

/**
 * @file
 * UI tests for the Business module.
 */

class BusinessUITestCase extends BusinessWebTestCase {

  /**
   * A test user.
   *
   * @var object $user
   */
  protected $user;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'UI test',
      'description' => 'Tests the managing of businesses through the user interface.',
      'group' => 'Business',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setup('business');

    // Create a test user and log in.
    $permissions = array('administer businesses');
    $this->user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->user);
  }

  /**
   * Tests the business form.
   */
  public function testBusinessForm() {
    // Check that the database table exists and is empty.
    $this->assertTrue(db_table_exists('business'), 'The business database table exists.');
    $this->assertBusinessTableEmpty('The business database is initially empty.');

    // Check that error messages are displayed about required fields when
    // creating a new business.
    $required_fields = array(
      'name' => t('Business name'),
      'field_business_email[und][0][email]' => t('Email address'),
    );
    $messages = array();
    foreach ($required_fields as $required_field) {
      $messages['error'][] = t('!name field is required.', array('!name' => $required_field));
    }
    $this->drupalPost('business/add', array(), t('Save'));
    $this->assertFieldValidationFailed(array_keys($required_fields));
    $this->assertStatusMessages($messages);

    // Check form validation errors.
    $invalid_values = array(
      'field_business_email[und][0][email]' => $this->randomString(),
    );
    $messages = array(
      'error' => array(
        t('!name field is required.', array('!name' => t('Business name'))),
        t('"%mail" is not a valid email address', array('%mail' => $invalid_values['field_business_email[und][0][email]']))),
    );
    $this->drupalPost('business/add', $invalid_values, t('Save'));
    $this->assertFieldValidationFailed(array_keys($invalid_values));
    $this->assertStatusMessages($messages);

    // Fill in all the fields and check if they are saved correctly.
    $values = $this->randomBusinessValues();
    $business = $this->createUiBusiness($values);
    $messages = array('status' => array(t('New business %name has been added.', array('%name' => $values['name']))));
    $this->assertStatusMessages($messages);
    $this->assertBusinessTableNotEmpty('The business database table is no longer empty after creating a business.');
    $this->assertBusinessProperties($business, $values, 'The business has been correctly saved to the database.');

    // Check that the form fields have correct values when the business is edited.
    $this->drupalGet('business/' . $business->bid . '/edit');
    $form_values = $this->convertToFormPostValues($values);
    foreach ($form_values as $name => $value) {
      $this->assertFieldByName($name, $value, format_string('When editing an existing business the %name field has the right value.', array('%name' => $name)));
    }

    // Change the values and check that the entity is correctly updated.
    $new_values = $this->randomBusinessValues();
    $this->drupalPost('business/' . $business->bid . '/edit', $this->convertToFormPostValues($new_values), t('Save'));
    $business = business_load($business->bid, TRUE);
    $this->assertRaw(t('The changes have been saved.', array('%name' => $values['name'])), 'A message is shown informing the user that the business has been edited.');
    $this->assertBusinessProperties($business, $new_values, 'The updated business has been correctly saved to the database.');

    // Check that the user is redirected to the confirmation page when clicking
    // the 'Delete' button on the business edit page.
    $this->drupalPost('business/' . $business->bid . '/edit', array(), t('Delete'));
    $this->assertUrl('business/' . $business->bid . '/delete', array(), 'The user is redirected to the confirmation form when clicking the "Delete" button in the business edit form.');
    $this->assertRaw(t('Are you sure you want to delete %name?', array('%name' => $business->name)), 'The confirmation message is shown when deleting a user.');
    $this->assertRaw(t('This action cannot be undone.'), 'The disclaimer is shown when deleting a user.');

    // Check that the business can be deleted.
    $this->drupalPost('business/' .$business->bid . '/delete', array(), t('Delete'));
    $this->assertRaw(t('Business %name has been deleted.', array('%name' => $business->name)), 'A message is shown informing the user that the business has been deleted.');
    $this->assertBusinessTableEmpty('The business database is empty after the business has been deleted.');
  }

  /**
   * Returns form post values from the given entity values.
   *
   * @see self::randomBusinessValues()
   *
   * @param array $values
   *   An associative array of business values, keyed by property name, as
   *   returned by self::randomBusinessValues().
   *
   * @returns array
   *   An associative array of values, keyed by form field name, as used by
   *   parent::drupalPost().
   */
  public function convertToFormPostValues($values) {
    return array(
      'name' => $values['name'],
      'field_businesst_email[und][0][email]' => $values['field_business_email'],
      // @todo Support other countries in addition to Belgium.
      'field_business_address[und][0][country]' => 'BE',
      'field_business_address[und][0][thoroughfare]' => $values['field_business_address']['thoroughfare'],
      'field_business_address[und][0][postal_code]' => $values['field_business_address']['postal_code'],
      'field_business_address[und][0][locality]' => $values['field_business_address']['locality'],
      'field_business_vat[und][0][value]' => $values['field_business_vat'],
      'field_business_phone[und][0][value]' => $values['field_business_phone'],
      'field_business_mobile[und][0][value]' => $values['field_business_mobile'],
      'field_business_bic[und][0][value]' => $values['field_business_bic'],
      'field_business_iban[und][0][value]' => $values['field_business_iban'],
    );
  }

  /**
   * {@inheritdoc}
   */
  public function randomBusinessValues() {
    $values = parent::randomBusinessValues();

    // @todo Support other countries in addition to Belgium.
    $values['field_business_address']['country'] = 'BE';
    $values['field_business_shipping_address']['country'] = 'BE';

    return $values;
  }

}
