<?php

/**
 * @file
 * Tests for the Tax rate entity.
 */

module_load_include('inc', 'test_traits', 'base');
module_load_include('inc', 'test_traits', 'tax_rate');

class TaxRateEntityTestCase extends EntityTestCase {

  use BaseTestHelper;
  use TaxRateTestHelper;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Entity test',
      'description' => 'Tests for the Tax rate entity.',
      'group' => 'Invoicing - Tax rate',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();

    // Save a business, a client and a line item of each type so they can be
    // referenced.
    $business = $this->createBusiness();
    $business->save();
    $this->createClient(array('bid' => $business->identifier()))->save();
    $this->createTaxRate('tax_rate')->save();
  }

  /**
   * {@inheritdoc}
   */
  public function getName() {
    return 'tax rate';
  }

  /**
   * {@inheritdoc}
   */
  public function getTypes() {
    return array('tax_rate');
  }

  /**
   * {@inheritdoc}
   */
  public function createEntityType($type, $name) {
    tax_rate_type_create($type, $name);
  }

  /**
   * {@inheritdoc}
   */
  public function createEntity(array $values = array()) {
    return tax_rate_create($values);
  }

  /**
   * {@inheritdoc}
   */
  public function updateEntityUsingEntityMetadataWrapper(Entity $entity, array $values) {
    $this->updateTaxRate($entity, $values);
  }

  /**
   * {@inheritdoc}
   */
  public function loadEntity($id) {
    return tax_rate_load($id, TRUE);
  }

  /**
   * {@inheritdoc}
   */
  protected function getBasicPropertyValues() {
    return $this->randomTaxRatePropertyValues();
  }

  /**
   * {@inheritdoc}
   */
  protected function getFieldValues($type) {
    return $this->randomTaxRateFieldValues();
  }

  /**
   * {@inheritdoc}
   */
  protected function getEntityMetaDataWrapperValues($type) {
    return $this->randomTaxRateValues();
  }

  /**
   * {@inheritdoc}
   */
  protected function convertPropertiesToEntityMetadataWrapperValues($properties) {
    // Convert the bid into a full Business object.
    $properties['bid'] = business_load($properties['bid']);

    return $properties;
  }

}
