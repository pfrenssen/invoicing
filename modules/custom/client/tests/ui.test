<?php

/**
 * @file
 * UI tests for the Client module.
 */

class ClientUITestCase extends DrupalWebTestCase {

  /**
   * A test user.
   *
   * @var object $user
   */
  protected $user;

  /**
   * {@inheritdoc}
   */
  protected $profile = 'testing';

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'UI test',
      'description' => 'Tests the managing of clients through the user interface.',
      'group' => 'Client',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setup('client');

    module_load_include('inc', 'test_traits', 'client');
    module_load_include('inc', 'test_traits', 'base');

    // Create a test user and log in.
    $permissions = array('administer clients');
    $this->user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->user);
  }

  /**
   * Tests the client form.
   */
  public function testClientForm() {
    // Check that the database table exists and is empty.
    $this->assertTrue(db_table_exists('client'), 'The client database table exists.');
    $this->assertClientTableEmpty('The client database is initially empty.');

    // Check that error messages are displayed about required fields when
    // creating a new client.
    $required_fields = array(
      'name' => t('Client name'),
      'field_client_email[und][0][email]' => t('Email address'),
    );
    $messages = array();
    foreach ($required_fields as $required_field) {
      $messages['error'][] = t('!name field is required.', array('!name' => $required_field));
    }
    $this->drupalPost('client/add', array(), t('Save'));
    $this->assertFieldValidationFailed(array_keys($required_fields));
    $this->assertStatusMessages($messages, 'Error messages are shown informing the user about required fields.');

    // Check form validation errors.
    $invalid_values = array(
      'field_client_email[und][0][email]' => $this->randomString(),
    );
    $messages = array(
      'error' => array(
        t('!name field is required.', array('!name' => t('Client name'))),
        t('"%mail" is not a valid email address', array('%mail' => $invalid_values['field_client_email[und][0][email]']))),
    );
    $this->drupalPost('client/add', $invalid_values, t('Save'));
    $this->assertFieldValidationFailed(array_keys($invalid_values));
    $this->assertStatusMessages($messages, 'Error messages are shown informing the user about form validation errors.');

    // Fill in all the fields and check if they are saved correctly.
    $values = $this->randomClientValues();
    $client = $this->createUiClient($values);
    $messages = array('status' => array(t('New client %name has been added.', array('%name' => $values['name']))));
    $this->assertStatusMessages($messages, 'A message is shown informing the user that the client has been added.');
    $this->assertClientTableNotEmpty('The client database table is no longer empty after creating a client.');
    $this->assertClientProperties($client, $values, 'The client has been correctly saved to the database.');
    $this->assertUrl('clients', array(), 'The user is redirected to the client overview after creating a new client.');

    // Check that the form fields have correct values when the client is edited.
    $this->drupalGet('client/' . $client->cid . '/edit');
    $form_values = $this->convertToFormPostValues($values);
    foreach ($form_values as $name => $value) {
      $this->assertFieldByName($name, $value, format_string('When editing an existing client the %name field has the right value.', array('%name' => $name)));
    }

    // Change the values and check that the entity is correctly updated.
    $new_values = $this->randomClientValues();
    $this->drupalPost('client/' . $client->cid . '/edit', $this->convertToFormPostValues($new_values), t('Save'));
    $client = client_load($client->cid, TRUE);
    $messages = array('status' => array(t('The changes have been saved.', array('%name' => $values['name']))));
    $this->assertStatusMessages($messages, 'A message is shown informing the user that the client has been edited.');
    $this->assertClientProperties($client, $new_values, 'The updated client has been correctly saved to the database.');
    $this->assertUrl('clients', array(), 'The user is redirected to the client overview after editing a client.');

    // Check that the user is redirected to the confirmation page when clicking
    // the 'Delete' button on the client edit page.
    $this->drupalPost('client/' . $client->cid . '/edit', array(), t('Delete'));
    $this->assertUrl('client/' . $client->cid . '/delete', array(), 'The user is redirected to the confirmation form when clicking the "Delete" button in the client edit form.');
    $this->assertRaw(t('Are you sure you want to delete %name?', array('%name' => $client->name)), 'The confirmation message is shown when deleting a user.');
    $this->assertRaw(t('This action cannot be undone.'), 'The disclaimer is shown when deleting a user.');

    // Check that the client can be deleted.
    $this->drupalPost('client/' .$client->cid . '/delete', array(), t('Delete'));
    $messages = array('status' => array(t('Client %name has been deleted.', array('%name' => $client->name))));
    $this->assertStatusMessages($messages, 'A message is shown informing the user that the client has been deleted.');
    $this->assertClientTableEmpty('The client database is empty after the client has been deleted.');
    $this->assertUrl('clients', array(), 'The user is redirected to the client overview after deleting a client.');
  }

  /*
   * Tests the rendering of the client entity.
   */
  public function testClientViewEntity() {
    $client = $this->createUiClient();
    $this->drupalGet('client/' . $client->cid);

    // Check that the entity is rendered.
    $this->assertXPathElements($this->getClientEntityXpath(), 1, array(), 'The client entity is rendered.');

    // Check that the page title is set to the client name.
    // @todo: Change "Drupal" to the project name.
    // @see http://atrium.pocomas.be/invoicing/node/1169
    $this->assertTitle($client->name . ' | Drupal');

    $xpath = '//h1[@id = "page-title" and contains(text(), :name)]';
    $this->assertXPathElements($xpath, 1, array(':name' => $client->name), 'The page title contains the client name.');

    // Check that all fields are rendered.
    $xpath = '//div[contains(@class, "field-name-field-client-address")]';
    $this->assertXPathElements($this->getClientEntityXpath($xpath), 1, array(), 'The address field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-client-shipping-address")]';
    $this->assertXPathElements($this->getClientEntityXpath($xpath), 1, array(), 'The shipping address field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-client-email")]';
    $this->assertXPathElements($this->getClientEntityXpath($xpath), 1, array(), 'The email field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-client-notes")]';
    $this->assertXPathElements($this->getClientEntityXpath($xpath), 1, array(), 'The notes field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-client-phone")]';
    $this->assertXPathElements($this->getClientEntityXpath($xpath), 1, array(), 'The phone field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-client-vat")]';
    $this->assertXPathElements($this->getClientEntityXpath($xpath), 1, array(), 'The vat field is rendered.');

    // Check if the tabs are rendered.
    $xpath = '//ul[contains(@class, "tabs")]//a[@href=:href]';
    $url = url('client/' . $client->cid);
    $this->assertXPathElements($xpath, 1, array(':href' => $url), 'The client view tab is rendered.');
    $this->assertXPathElements($xpath, 1, array(':href' => $url . '/edit'), 'The client edit tab is rendered.');
    $this->assertXPathElements($xpath, 1, array(':href' => $url . '/delete'), 'The client delete tab is rendered.');
  }

  /**
   * Returns form post values from the given entity values.
   *
   * @see self::randomClientValues()
   *
   * @param array $values
   *   An associative array of client values, keyed by property name, as
   *   returned by self::randomClientValues().
   *
   * @returns array
   *   An associative array of values, keyed by form field name, as used by
   *   parent::drupalPost().
   */
  public function convertToFormPostValues($values) {
    return array(
      'name' => $values['name'],
      'field_client_email[und][0][email]' => $values['field_client_email'],
      // @todo Support other countries in addition to Belgium.
      'field_client_address[und][0][country]' => 'BE',
      'field_client_address[und][0][thoroughfare]' => $values['field_client_address']['thoroughfare'],
      'field_client_address[und][0][postal_code]' => $values['field_client_address']['postal_code'],
      'field_client_address[und][0][locality]' => $values['field_client_address']['locality'],
      // @todo Support other countries in addition to Belgium.
      'field_client_shipping_address[und][0][country]' => 'BE',
      'field_client_shipping_address[und][0][thoroughfare]' => $values['field_client_shipping_address']['thoroughfare'],
      'field_client_shipping_address[und][0][postal_code]' => $values['field_client_shipping_address']['postal_code'],
      'field_client_shipping_address[und][0][locality]' => $values['field_client_shipping_address']['locality'],
      'field_client_vat[und][0][value]' => $values['field_client_vat'],
      'field_client_phone[und][0][value]' => $values['field_client_phone'],
      'field_client_notes[und][0][value]' => $values['field_client_notes'],
    );
  }

  /**
   * {@inheritdoc}
   */
  public function randomClientValues() {
    $values = parent::randomClientValues();

    // @todo Support other countries in addition to Belgium.
    $values['field_client_address']['country'] = 'BE';
    $values['field_client_shipping_address']['country'] = 'BE';

    return $values;
  }

  /**
   * Constructs a XPath query to find an element on the client entity page.
   *
   * @param string $pxath
   *   The path seector to search for.
   */
  protected function getClientEntityXpath($xpath = NULL) {
    $parts = array(
      '//div[contains(@class, "entity-client")]',
    );

    if (!empty($xpath)) {
      $parts[] = $xpath;
    }

    $query = implode('', $parts);
    return $query;
  }

}
