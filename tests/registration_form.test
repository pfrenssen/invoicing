<?php

/**
 * @file
 * Contains \InvoicingRegistrationFormTestCase.
 */

invoicing_core_autoload();

/**
 * Tests the user registration form.
 */
class InvoicingRegistrationFormTestCase extends InvoicingIntegrationTestCase {

  use \Drupal\invoicing\Traits\BaseTestHelper;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Registration form',
      'description' => 'Tests the registration form.',
      'group' => 'Invoicing - Registration',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected $usersToCreate = array();

  /**
   * Tests the user registration form.
   */
  public function testUserRegistrationForm() {
    // Check that the registration fields are required.
    $this->drupalPost('user/register', array(), t('Create new account'));
    $required_fields = array(
      'mail' => t('E-mail'),
      'pass[pass1]' => t('Password'),
      'business' => t('Company name'),
    );
    $this->assertRequiredFieldMessages($required_fields);

    // Fill in the fields and submit the form.
    $password = $this->randomString();
    $values = array(
      'mail' => $this->randomEmail(),
      'pass[pass1]' => $password,
      'pass[pass2]' => $password,
      'business' => $this->randomString(),
    );
    $this->drupalPost('user/register', $values, t('Create new account'));

    // Check that the user is informed that an activation mail is sent.
    $messages = array(
      'status' => array(t('A welcome message with further instructions has been sent to your e-mail address.')),
    );
    $this->assertStatusMessages($messages);
    $this->assertMail('to', $values['mail'], 'An email has been sent to the email address that was used for registering.');

    // Check that the user account was created correctly.
    $accounts = user_load_multiple(array(), array('mail' => $values['mail']));
    $user = reset($accounts);
    $this->assertFalse($user->status, 'New account is not active after registration.');
    $this->assertTrue(in_array('business owner', $user->roles), 'The account has the business owner role.');
    $this->assertTrue(in_array('authenticated user', $user->roles), 'The account has the authenticated user role.');
    $this->assertEqual(count($user->roles), 2, 'The account does not have any other roles.');
    $this->assertEqual($user->mail, $values['mail'], 'The account has the correct email address.');

    // Check that a business with the given name was created and is associated
    // with the user.
    $businesses_reference = field_get_items('user', $user, 'field_user_businesses');
    $business_reference = reset($businesses_reference);
    $business = business_load($business_reference['target_id']);
    $this->assertEqual($business->name, $values['business'], 'The correct business is created and associated with the user.');

    // Activate the account by clicking on the link sent in the email.
    $captured_emails = variable_get('drupal_test_email_collector', array());
    $email = end($captured_emails);
    $matches = array();
    preg_match('/user\/registrationpassword\/.+/', $email['body'], $matches);
    $activation_path = $matches[0];
    $this->drupalGet($activation_path);
    $this->assertText(t('You have just used your one-time login link. Your account is now active and you are authenticated.'));
  }

}
