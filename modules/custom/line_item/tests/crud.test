<?php

/**
 * @file
 * Contains \LineItemCRUDTestCase.
 */

invoicing_core_autoload();

/**
 * CRUD tests for the Line item module.
 */
class LineItemCRUDTestCase extends InvoicingIntegrationTestCase {

  use \Drupal\invoicing\Traits\BaseTestHelper;
  use \Drupal\invoicing\Traits\LineItemTestHelper;

  /**
   * {@inheritdoc}
   */
  protected $usersToCreate = array();

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'CRUD test',
      'description' => 'Tests the creating, reading, updating and deleting of line items.',
      'group' => 'Invoicing - Line item',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create a business to reference.
    $this->business = $this->createBusiness();
    $this->business->save();
  }

  /**
   * Tests creating, reading, updating and deleting of line items.
   */
  public function testLineItemCrud() {
    // Check that the database table exists and is empty.
    $this->assertTrue(db_table_exists('line_item'), 'The line_item database table exists.');
    $this->assertLineItemTableEmpty('The line item database is initially empty.');

    // Check if a new line item can be saved to the database.
    $values = $this->randomLineItemValues();
    $line_item = $this->createLineItem($values['type'], $values);
    $line_item->save();
    $this->assertLineItemTableNotEmpty('The line item database table is no longer empty after creating a line item.');

    // Check that the line item data can be read from the database.
    $retrieved_line_item = line_item_load($line_item->lid);
    $this->assertLineItemProperties($retrieved_line_item, $values, 'The line item that was saved to the database can be read correctly.');

    // Update the line item and check that the new values were written to the
    // database.
    $new_values = $this->randomLineItemValues($values['type']);
    unset($new_values['type']);
    $this->updateLineItem($line_item, $new_values);
    $line_item->save();
    $this->assertLineItemProperties($line_item, $new_values, 'The line item has been updated correctly.');

    // Delete the line item. The database should be empty again.
    $line_item->delete();
    $this->assertLineItemTableEmpty('The line item can be deleted from the database.');

    // Test that an exception is thrown when trying to save a line item without
    // the required properties 'bid' and 'type'.
    foreach (array('bid', 'type') as $property) {
      $arguments = array('%property' => $property);
      $message = format_string('An exception is thrown when trying to save a line item without the required property %property.', $arguments);

      $line_item = $this->createLineItem($values['type'], $values);
      unset($line_item->$property);

      try {
        $line_item->save();
        $this->fail($message);
      }
      catch (InvalidArgumentException $e) {
        $this->pass($message);
      }
    }
  }

  /**
   * Tests creating, reading, updating and deleting of tax rates.
   */
  public function testTaxRateCrud() {
    // Check that the database table exists and is empty.
    $this->assertTrue(db_table_exists('tax_rates'), 'The tax_rates database table exists.');
    $this->assertTaxRatesTableEmpty('The tax rates database is initially empty.');

    // Check if a new tax rate can be saved to the database.
    $values = $this->randomTaxRateValues();
    $tax_rate = new TaxRate($values['bid'], $values['name'], $values['rate']);
    $tid = line_item_tax_rate_save($tax_rate);
    $this->assertTaxRatesTableNotEmpty('The tax rate database table is no longer empty after creating a tax rate.');

    // Check that the tax rate data can be read from the database.
    $retrieved_tax_rate = line_item_tax_rate_load($tid);
    $this->assertTaxRateProperties($retrieved_tax_rate, $values, 'The tax rate that was saved to the database can be read correctly.');

    // Update the tax rate and check that the new values were written to the
    // database.
    $new_values = $this->randomTaxRateValues();
    $new_values['tid'] = $retrieved_tax_rate->tid;
    $new_tax_rate = new TaxRate($new_values['bid'], $new_values['name'], $new_values['rate'], $new_values['tid']);
    $tid = line_item_tax_rate_save($new_tax_rate);

    $retrieved_tax_rate = line_item_tax_rate_load($tid);
    $this->assertTaxRateProperties($retrieved_tax_rate, $new_values, 'The tax rate has been updated correctly.');

    // Delete the tax rate. The database should be empty again.
    line_item_tax_rate_delete($retrieved_tax_rate);
    $this->assertTaxRatesTableEmpty('The tax rate can be deleted from the database.');
  }

}
