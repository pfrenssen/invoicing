<?php

/**
 * @file
 * Main functions and hook implementations for the Invoicing Core module.
 */

include_once 'invoicing_core.features.inc';

/**
 * Implements hook_menu().
 */
function invoicing_core_menu() {
  return [
    'user/%user/resend/%ctools_js' => [
      'title' => 'Resend activation mail',
      'page callback' => 'invoicing_core_resend_activation_mail_callback',
      'page arguments' => [1, 3],
      // This is an AJAX callback so it should never return a 403. Access is
      // handled in the page callback itself.
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ],
  ];
}

/**
 * Implements hook_menu_alter().
 */
function invoicing_core_menu_alter(&$items) {
  // Deny access to the 'node' page.
  $items['node']['access callback'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function invoicing_core_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Add a field for the business name.
  $form['business'] = [
    '#type' => 'textfield',
    '#title' => t('Company name'),
    '#required' => TRUE,
    '#weight' => -14,
  ];

  // Attach our validate and submit handlers. Make sure our submit handler runs
  // first so we can directly link the new business when the user is created.
  $form['#validate'][] = 'invoicing_core_form_user_register_form_validate';
  array_unshift($form['#submit'], 'invoicing_core_form_user_register_form_submit');
}

/**
 * Validate handler for user_register_form().
 *
 * Checks whether the business name is still available.
 */
function invoicing_core_form_user_register_form_validate($form, &$form_state) {
  // Check if the business name is already taken.
  if (!business_name_available($form_state['values']['business'])) {
    form_set_error('business', t('The company name you have chosen is no longer available. Please choose a different name.'));
  }
}

/**
 * Submit handler for user_register_form().
 *
 * Creates a new business with the chosen name and links it to the user.
 */
function invoicing_core_form_user_register_form_submit($form, &$form_state) {
  // Create a new business with the given name.
  $business = business_create();
  $business->wrapper()->field_business_name->set($form_state['values']['business']);
  $business->save();

  // Set the value of the referenced business so it can get saved when the user
  // is created.
  $form_state['values']['field_user_businesses'][LANGUAGE_NONE][0]['target_id'] = $business->identifier();

  // Assign the 'business owner' role.
  $role = user_role_load_by_name('business owner');
  $form_state['values']['roles'][$role->rid] = TRUE;
}

/**
 * Implements hook_views_pre_view().
 *
 * Alters the "Invoices" view:
 * - Prevent business owners from bypassing the active business filter by
 *   providing an argument like "/all".
 * - Change the display of the invoice and client overviews to the 'Admin
 *   overview' if the user is an administrator.
 */
function invoicing_core_views_pre_view(&$view, &$display_id, &$args) {
  $contextual_arguments = $view->display_handler->get_option('arguments');

  // Change the display of the invoice and client overviews to the 'Admin
  // overview' if the user is an administrator.
  if (user_access('administer businesses') && in_array($view->name, ['clients', 'invoices']) && $display_id == 'overview') {
    $view->set_display('admin_overview');
  }
  // Prevent business owners from seeing items which are not linked to their
  // active business by going to an url like "invoices/all". This works on all
  // views that have the "active business" argument.
  elseif (array_key_exists('bid', $contextual_arguments) && $contextual_arguments['bid']['default_argument_type'] == 'business_active') {
    $args = NULL;
  }
}

/**
 * Returns the path to the wkhtmltopdf binary.
 *
 * @return string
 *   The path to the binary.
 */
function invoicing_core_get_wkhtmltopdf_path() {
  return DRUPAL_ROOT . '/vendor/bin/wkhtmltopdf-amd64';
}

/**
 * Implements hook_form_alter().
 *
 * Performs the following form alterations:
 * - Adds an additional validate handler on the user login forms that will allow
 *   to resend the activation e-mail.
 */
function invoicing_core_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, ['user_login', 'user_login_block'])) {
    // Replace the standard user name validation handler with our own.
    $key = array_search('user_login_name_validate', $form['#validate']);
    $form['#validate'][$key] = 'invoicing_core_login_name_validate';
  }
}

/**
 * Validate handler for user login forms.
 *
 * Replacement for user_login_name_validate().
 *
 * Displays a custom error message including an AJAX link to resend the
 * activation mail if the supplied username is not yet activated.
 *
 * @see invoicing_core_form_alter()
 * @see user_login_name_validate()
 */
function invoicing_core_login_name_validate($form, &$form_state) {
  // Only show the resend message if the user successfully entered their name
  // and password, to prevent disclosure of e-mail addresses.
  if (!empty($form_state['values']['name']) && !empty($form_state['values']['pass']) && user_authenticate($form_state['values']['name'], $form_state['values']['pass']) && user_is_blocked($form_state['values']['name'])) {
    // Start a session so we can use a token to protect the link for the user
    // which is still anonymous at this point.
    drupal_session_start();

    // Set a message including an AJAX link to resend the activation mail.
    drupal_add_library('system', 'drupal.ajax');
    $user = user_load_by_name($form_state['values']['name']);
    $options = [
      'attributes' => ['class' => ['use-ajax']],
      'html' => TRUE,
      'query' => ['token' => drupal_get_token($user->uid)],
    ];
    $link = l(t('resend the activation e-mail'), 'user/' . $user->uid . '/resend/nojs', $options);

    form_set_error('name', t('Your account is not yet activated. Please follow the link in your activation e-mail. If you have not received the mail, please check your spam folder, or !resend_link.', ['!resend_link' => $link]));
  }
}

/**
 * Page callback: resends activation mail and displays confirmation.
 */
function invoicing_core_resend_activation_mail_callback($account, $js) {
  // Only resend the mail if a valid token is present.
  if (!empty($_GET['token']) && drupal_valid_token($_GET['token'], $account->uid)) {
    // Resend the activation mail.
    $params = ['account' => $account];
    $language = user_preferred_language($account);
    $mail = drupal_mail('user', 'register_no_approval_required', $account->mail, $language, $params);

    if ($mail['result'] === TRUE) {
      $status = 'status';
      $message = t('The activation e-mail has been sent to %email.', ['%email' => $account->mail]);
    }
  }

  // Display an error if the mail could not be sent, or there is no valid token.
  if (!isset($message)) {
    $status = 'error';
    $message = t('The activation e-mail could not be sent. Please try again later.', ['%email' => $account->mail]);
    // @todo Notify admins of the problem.
    $watchdog_message = isset($mail) ? 'The activation mail could not be resent to user %uid.' : 'User %uid tried to resend the activation mail using an invalid token.';
    watchdog('invoicing_core', $watchdog_message, ['%uid' => $account->uid]);
  }

  // Recreate the output of the status messages.
  drupal_set_message($message, $status);
  $output = [
    '#type' => 'container',
    '#attributes' => ['id' => 'messages'],
    'inner-container' => [
      '#type' => 'container',
      '#attributes' => ['class' => ['clearfix']],
      'message' => ['#theme' => 'status_messages'],
    ],
  ];

  if ($js) {
    // Replace the existing error message with the new message. When displayed
    // at the top of the screen this has an additional class 'section'.
    $output['inner-container']['#attributes']['class'][] = 'section';

    ctools_include('ajax');
    $commands = [ajax_command_replace('#messages', drupal_render($output))];
    print ajax_render($commands);
    exit;
  }

  // If the user does not have Javascript, output the error message inside the
  // page body.
  return drupal_render($output);
}
