<?php

/**
 * @file
 * Unit tests for the Client module.
 */

module_load_include('inc', 'test_traits', 'base');
module_load_include('inc', 'test_traits', 'business');
module_load_include('inc', 'test_traits', 'client');

class ClientUnitTestCase extends DrupalWebTestCase {

  use BaseTestHelper;
  use BusinessTestHelper;
  use ClientTestHelper;

  /**
   * {@inheritdoc}
   */
  protected $profile = 'testing';

  /**
   * Test user accounts.
   *
   * @var array
   *   An array of user objects.
   */
  protected $users;

  /**
   * Test business entities.
   *
   * @var Business[]
   *   An array of Business entities.
   */
  protected $businesses;

  /**
   * Test client entities.
   *
   * @var Client[]
   *   An array of Client entities.
   */
  protected $clients;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Unit test',
      'description' => 'Unit tests for the client module.',
      'group' => 'Invoicing - Client',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setup('client');

    // Create two test users, each owning one business with two clients.
    $this->businesses = array();
    $this->clients = array();
    $this->users = array();

    for ($i = 0; $i < 2; $i++) {
      // Create a business.
      $this->businesses[$i] = $this->createBusiness();
      $this->businesses[$i]->save();

      // Create a user and link the business to it.
      $this->users[$i] = $this->drupalCreateUser();
      $user = entity_metadata_wrapper('user', $this->users[$i]);
      $user->field_user_businesses->set(array($this->businesses[$i]->identifier()));
      $user->save();

      // Create two clients for the business.
      for ($j = 0; $j < 2; $j++) {
        $client = $this->createClient(array('bid' => $this->businesses[$i]->identifier()));
        $client->save();
        $this->clients[] = $client;
      }
    }
  }

  /**
   * Tests client_is_owned_by_user().
   */
  public function testClientIsOwnedByUser() {
    // Define a list of which clients are owned by which users. The first two
    // clients belong to the first user, the last two to the second.
    $ownership = array(
      0 => array(0, 1),
      1 => array(2, 3),
    );

    // Test if client_is_owned_by_user() matches the expected ownership.
    foreach ($ownership as $user_key => $client_keys) {
      for ($i = 0; $i < 4; $i++) {
        $owned = in_array($i, $client_keys);
        $this->assertEqual($owned, client_is_owned_by_user($this->clients[$i], $this->users[$user_key]), format_string('Client :client :owned by user :user.', array(
          ':client' => $i,
          ':owned' => $owned ? 'is owned' : 'is not owned',
          ':user' => $user_key,
        )));
      }
    }
  }

}
