<?php

/**
 * @file
 * Access and permission tests for the 'business owner' role.
 */

module_load_include('inc', 'test_traits', 'base');
module_load_include('inc', 'test_traits', 'business');
module_load_include('inc', 'test_traits', 'client');
module_load_include('inc', 'test_traits', 'invoice');
module_load_include('inc', 'test_traits', 'line_item');

class BusinessOwnerPathAccessTestCase extends AccessWebTestCase {

  use BaseTestHelper;
  use BusinessTestHelper;
  use ClientTestHelper;
  use InvoiceTestHelper;
  use LineItemTestHelper;

  /**
   * {@inheritdoc}
   */
  protected $role = 'business owner';

  /**
   * {@inheritdoc}
   */
  protected $usersToCreate = array('business owner');

  /**
   * {@inheritdoc}
   */
  protected $accessiblePaths = array(
    '<front>',
    'client/add',
    'clients',
    'dashboard',
    'invoices',
    'invoice/add',
    'user',
    'user/password',
    'user/register',
  );

  /**
   * {@inheritdoc}
   */
  protected $inaccessiblePaths = array(
    'admin',
    'admin/config',
    'admin/config/people',
    'admin/content',
    'admin/people',
    'admin/reports',
    'admin/structure',

    // @todo These will become accessible once we have 'edit/create own business'
    //  permissions.
    // @see http://atrium.pocomas.be/invoicing/node/1167
    'businesses',
    'business/add',
    'node',
    'node/add',
  );

  /**
   * A business owned by the business owner.
   *
   * @var Business
   */
  protected $business1;

  /**
   * A business which is not owned by the business owner.
   *
   * @var Business
   */
  protected $business2;

  /**
   * A client owned by the business owner.
   *
   * @var Client
   */
  protected $client1;

  /**
   * A client which is not owned by the business owner.
   *
   * @var Client
   */
  protected $client2;

  /**
   * A client owned by the business owner but without any invoices.
   *
   * @var Client
   */
  protected $client3;

  /**
   * An invoice owned by the business owner.
   *
   * @var Invoice
   */
  protected $invoice1;

  /**
   * An invoice which is not owned by the business owner.
   *
   * @var Invoice
   */
  protected $invoice2;

  /**
   * A line item owned by the business owner.
   *
   * @var LineItem
   */
  protected $lineItem1;

  /**
   * A line item which is not owned by the business owner.
   *
   * @var LineItem
   */
  protected $lineItem2;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Business owner',
      'description' => 'Tests access permissions for the "business owner" role.',
      'group' => 'Invoicing - Access',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();

    // Create two businesses, of which the first is owned by the business owner.
    $this->business1 = $this->createBusiness();
    $this->business1->save();
    $this->addBusinessToUser($this->business1, $this->users['business owner']);

    $this->business2 = $this->createBusiness();
    $this->business2->save();

    // Add the paths to view and edit the business. These should only be
    // accessible for the first business.
    $this->accessiblePaths[] = 'business/' . $this->business1->identifier();
    $this->accessiblePaths[] = 'business/' . $this->business1->identifier() . '/edit';
    $this->inaccessiblePaths[] = 'business/' . $this->business2->identifier();
    $this->inaccessiblePaths[] = 'business/' . $this->business2->identifier() . '/edit';

    // Deleting the businesses should not be possible at all.
    $this->inaccessiblePaths[] = 'business/' . $this->business1->identifier() . '/delete';
    $this->inaccessiblePaths[] = 'business/' . $this->business2->identifier() . '/delete';

    // Add a client to each business. The business owner should only be able to
    // view, edit and delete their own clients.
    $this->client1 = $this->createClient(array('bid' => $this->business1->identifier()));
    $this->client1->save();
    $this->client2 = $this->createClient(array('bid' => $this->business2->identifier()));
    $this->client2->save();

    // Add a third client which is owned by the business owner but does not have
    // any invoices. Clients without invoices can be deleted.
    $this->client3 = $this->createClient(array('bid' => $this->business1->identifier()));
    $this->client3->save();

    // Add the paths to view, edit and delete the clients. These should only be
    // accessible for the first and third clients. The first client will have an
    // invoice and cannot be deleted.
    $this->accessiblePaths[] = 'client/' . $this->client1->identifier();
    $this->accessiblePaths[] = 'client/' . $this->client1->identifier() . '/edit';
    $this->inaccessiblePaths[] = 'client/' . $this->client1->identifier() . '/delete';
    $this->inaccessiblePaths[] = 'client/' . $this->client2->identifier();
    $this->inaccessiblePaths[] = 'client/' . $this->client2->identifier() . '/edit';
    $this->inaccessiblePaths[] = 'client/' . $this->client2->identifier() . '/delete';
    $this->accessiblePaths[] = 'client/' . $this->client3->identifier();
    $this->accessiblePaths[] = 'client/' . $this->client3->identifier() . '/edit';
    $this->accessiblePaths[] = 'client/' . $this->client3->identifier() . '/delete';

    // File an invoice to each client. The business owner should only be able to
    // view, edit and delete their own invoices.
    $this->invoice1 = $this->createInvoice(array(
      'bid' => $this->business1->identifier(),
      'field_invoice_client' => $this->client1,
    ));
    $this->invoice1->save();
    $this->invoice2 = $this->createInvoice(array(
      'bid' => $this->business2->identifier(),
      'field_invoice_client' => $this->client2,
    ));
    $this->invoice2->save();

    // Add the paths to view, edit and delete the invoice. These should only be
    // accessible for the first invoice.
    $this->accessiblePaths[] = 'invoice/' . $this->invoice1->identifier();
    $this->accessiblePaths[] = 'invoice/' . $this->invoice1->identifier() . '/edit';
    $this->accessiblePaths[] = 'invoice/' . $this->invoice1->identifier() . '/delete';
    $this->inaccessiblePaths[] = 'invoice/' . $this->invoice2->identifier();
    $this->inaccessiblePaths[] = 'invoice/' . $this->invoice2->identifier() . '/edit';
    $this->inaccessiblePaths[] = 'invoice/' . $this->invoice2->identifier() . '/delete';

    // File a line item to each business. The business owner should not be able
    // to view, edit and delete any line items. They are managed in invoices.
    $this->lineItem1 = $this->createLineItem(array('bid' => $this->business1->identifier()));
    $this->lineItem1->save();
    $this->lineItem2 = $this->createLineItem(array('bid' => $this->business2->identifier()));
    $this->lineItem2->save();

    // Add the paths to view, edit and delete the line item. These should not be
    // accessible for any line items, since line items are managed in invoices.
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem1->identifier();
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem1->identifier() . '/edit';
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem1->identifier() . '/delete';
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem2->identifier();
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem2->identifier() . '/edit';
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem2->identifier() . '/delete';
  }

}
