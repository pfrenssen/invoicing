<?php

/**
 * @file
 * Contains \InvoiceCRUDTestCase.
 */

invoicing_core_autoload();

/**
 * CRUD tests for the Invoice module.
 */
class InvoiceCRUDTestCase extends InvoicingIntegrationTestCase {

  use \Drupal\invoicing\Traits\BaseTestHelper;
  use \Drupal\invoicing\Traits\BusinessTestHelper;
  use \Drupal\invoicing\Traits\ClientTestHelper;
  use \Drupal\invoicing\Traits\InvoiceTestHelper;
  use \Drupal\invoicing\Traits\LineItemTestHelper;

  /**
   * A test business.
   *
   * @var Business
   */
  protected $business;

  /**
   * A test client.
   *
   * @var Client
   */
  protected $client;

  /**
   * {@inheritdoc}
   */
  protected $usersToCreate = array();

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'CRUD test',
      'description' => 'Tests the creating, reading, updating and deleting of invoices.',
      'group' => 'Invoicing - Invoice',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setup();

    // Create a business that can be referenced in invoices.
    $this->business = $this->createBusiness();
    $this->business->save();

    // Create a client that can be referenced in invoices.
    $this->client = $this->createClient(array('bid' => $this->business->identifier()));
    $this->client->save();

    // Create a line item of each type so they can be referenced in invoices.
    $this->createLineItem('product')->save();
    $this->createLineItem('service')->save();
  }

  /**
   * Tests creating, reading, updating and deleting of invoices.
   */
  public function testInvoiceCrud() {
    // Check that the database table exists and is empty.
    $this->assertTrue(db_table_exists('invoice'), 'The invoice database table exists.');
    $this->assertInvoiceTableEmpty('The invoice database is initially empty.');

    // Check if a new invoice can be saved to the database.
    $values = $this->randomInvoiceValues();
    $invoice = $this->createInvoice($values);
    $invoice->save();
    $this->assertInvoiceTableNotEmpty('The invoice database table is no longer empty after creating an invoice.');

    // Check that the invoice data can be read from the database.
    $retrieved_invoice = invoice_load((int) $invoice->iid);
    $this->assertInvoiceProperties($retrieved_invoice, $values, 'The invoice that was saved to the database can be read correctly.');

    // Update the invoice and check that the new values were written to the
    // database.
    $new_values = $this->randomInvoiceValues();
    $this->updateInvoice($invoice, $new_values);
    $invoice->save();
    $this->assertInvoiceProperties($invoice, $new_values, 'The invoice has been updated correctly.');

    // Delete the invoice. The database should be empty again.
    $invoice->delete();
    $this->assertInvoiceTableEmpty('The invoice can be deleted from the database.');
  }

  /**
   * Checks if the discount field has the correct format after it is saved.
   *
   * This is a regression test for a bug that turned the discount field into an
   * integer when the invoice was saved. The discount should always be a string
   * with two decimal numbers.
   *
   * @see https://invoicing.atlassian.net/browse/IN-20
   */
  public function testDiscountFieldFormat() {
    $test_values = [
      0 => "0.00",
      1 => "1.00",
      "33.33" => "33.33",
      100 => "100.00",
    ];

    foreach ($test_values as $value => $expected_value) {
      $properties = $this->randomInvoicePropertyValues();
      $fields = $this->randomInvoiceFieldValues();
      $fields['field_invoice_discount'][LANGUAGE_NONE][0]['value'] = $value;
      $entity = invoice_create($properties + $fields);
      $entity->save();

      $args = ['%value' => $value];
      $message = format_string('The discount field is a string when an invoice is saved with a discount of %value.', $args);
      $this->assertTrue(is_string($entity->field_invoice_discount[LANGUAGE_NONE][0]['value']), $message);

      $message = format_string('The discount field is a formatted correctly when an invoice is saved with a discount of %value.', $args);
      $this->assertEqual($expected_value, $entity->field_invoice_discount[LANGUAGE_NONE][0]['value'], $message);
    }
  }

}
