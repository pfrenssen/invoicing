<?php

/**
 * @file
 * Contains \AdministratorPathAccessTestCase.
 */

invoicing_core_autoload();

/**
 * Access and permission tests for the 'administrator' role.
 */
class AdministratorPathAccessTestCase extends AccessWebTestCase {

  use \Drupal\invoicing\Traits\BaseTestHelper;
  use \Drupal\invoicing\Traits\BusinessTestHelper;
  use \Drupal\invoicing\Traits\ClientTestHelper;
  use \Drupal\invoicing\Traits\InvoiceTestHelper;
  use \Drupal\invoicing\Traits\LineItemTestHelper;

  /**
   * {@inheritdoc}
   */
  protected $role = 'administrator';

  /**
   * {@inheritdoc}
   */
  protected $usersToCreate = array('administrator');

  /**
   * {@inheritdoc}
   */
  protected $accessiblePaths = array(
    '<front>',
    'admin/clients',
    'admin/invoices',
    'businesses',
    'business/add',
    'clients',
    'client/add',
    'dashboard',
    'invoices',
    'invoice/add',
    'user',
    'user/password',
    'user/register',
  );

  /**
   * {@inheritdoc}
   */
  protected $inaccessiblePaths = array(
    'admin',
    'admin/config',
    'admin/config/people',
    'admin/content',
    'admin/people',
    'admin/reports',
    'admin/structure',
    'node',
    'node/add',
  );

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Administrator',
      'description' => 'Tests access permissions for the "administrator" role.',
      'group' => 'Invoicing - Access',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();

    // Create a business.
    $this->business = $this->createBusiness();
    $this->business->save();

    // Add the paths to view, edit and delete the business. These should all be
    // accessible.
    $this->accessiblePaths[] = 'business/' . $this->business->identifier();
    $this->accessiblePaths[] = 'business/' . $this->business->identifier() . '/edit';
    $this->accessiblePaths[] = 'business/' . $this->business->identifier() . '/delete';

    // Add a client to the business. This should also be accessible.
    $this->client = $this->createClient(array('bid' => $this->business->identifier()));
    $this->client->save();
    $this->accessiblePaths[] = 'client/' . $this->client->identifier();
    $this->accessiblePaths[] = 'client/' . $this->client->identifier() . '/edit';
    $this->accessiblePaths[] = 'client/' . $this->client->identifier() . '/delete';

    // Create a line item of each type so they can be referenced by invoices.
    $this->createLineItem('product')->save();
    $this->createLineItem('service')->save();

    // Add two invoices to the business. These should also be accessible.
    $this->invoice1 = $this->createInvoice(array(
      'bid' => $this->business->identifier(),
      'field_invoice_client' => $this->client,
    ));
    $this->invoice1->save();
    $this->invoice2 = $this->createInvoice(array(
      'bid' => $this->business->identifier(),
      'field_invoice_client' => $this->client,
    ));
    $this->invoice2->save();

    $this->accessiblePaths[] = 'invoice/' . $this->invoice1->identifier();
    $this->accessiblePaths[] = 'invoice/' . $this->invoice1->identifier() . '/delete';
    $this->accessiblePaths[] = 'invoice/' . $this->invoice1->identifier() . '/edit';
    $this->accessiblePaths[] = 'invoice/' . $this->invoice2->identifier();
    $this->accessiblePaths[] = 'invoice/' . $this->invoice2->identifier() . '/delete';
    $this->accessiblePaths[] = 'invoice/' . $this->invoice2->identifier() . '/edit';

    // The PDF download and HTML versions of an invoice should only be
    // accessible using tokens. When the tokens are missing or are incorrect the
    // paths should be inaccessible.
    $this->inaccessiblePaths[] = 'invoice/' . $this->invoice1->identifier() . '/download';
    $this->inaccessiblePaths[] = 'invoice/' . $this->invoice1->identifier() . '/html';
    $this->inaccessiblePaths[] = 'invoice/' . $this->invoice2->identifier() . '/download';
    $this->inaccessiblePaths[] = 'invoice/' . $this->invoice2->identifier() . '/html';

    // PDF downloads and HTML versions can be accessed using the correct tokens.
    $this->accessiblePaths[] = array(
      'path' => 'invoice/' . $this->invoice1->identifier() . '/download',
      'options' => array('query' => array('token' => $this->drupalGetToken('invoice-download-link-' . $this->invoice1->identifier()))),
    );
    $this->accessiblePaths[] = array(
      'path' => 'invoice/' . $this->invoice1->identifier() . '/html',
      'options' => array('query' => array('token' => invoice_get_token($this->invoice1))),
    );
    $this->accessiblePaths[] = array(
      'path' => 'invoice/' . $this->invoice2->identifier() . '/download',
      'options' => array('query' => array('token' => $this->drupalGetToken('invoice-download-link-' . $this->invoice2->identifier()))),
    );
    $this->accessiblePaths[] = array(
      'path' => 'invoice/' . $this->invoice2->identifier() . '/html',
      'options' => array('query' => array('token' => invoice_get_token($this->invoice2))),
    );

    // The PDF and HTML paths should be inaccessible with invalid tokens. To
    // test this we try to access the paths using the tokens of the other
    // invoices.
    $this->inaccessiblePaths[] = array(
      'path' => 'invoice/' . $this->invoice1->identifier() . '/download',
      'options' => array('query' => array('token' => $this->drupalGetToken('invoice-download-link-' . $this->invoice2->identifier()))),
    );
    $this->inaccessiblePaths[] = array(
      'path' => 'invoice/' . $this->invoice1->identifier() . '/html',
      'options' => array('query' => array('token' => invoice_get_token($this->invoice2))),
    );
    $this->inaccessiblePaths[] = array(
      'path' => 'invoice/' . $this->invoice2->identifier() . '/download',
      'options' => array('query' => array('token' => $this->drupalGetToken('invoice-download-link-' . $this->invoice1->identifier()))),
    );
    $this->inaccessiblePaths[] = array(
      'path' => 'invoice/' . $this->invoice2->identifier() . '/html',
      'options' => array('query' => array('token' => invoice_get_token($this->invoice1))),
    );

    // Create a line item.
    $this->lineItem = $this->createLineItem(NULL, array('bid' => $this->business->identifier()));
    $this->lineItem->save();

    // Line items can only be managed by editing the invoices to which they
    // belong. The paths to view, edit and delete them directly do not exist.
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem->identifier();
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem->identifier() . '/edit';
    $this->nonExistingPaths[] = 'line_item/' . $this->lineItem->identifier() . '/delete';
  }

}
