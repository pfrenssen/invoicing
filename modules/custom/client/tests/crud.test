<?php

/**
 * @file
 * CRUD tests for the Client module.
 */

class ClientCRUDTestCase extends ClientTestCase {

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'CRUD test',
      'description' => 'Tests the creating, reading, updating and deleting of clients.',
      'group' => 'Client',
    );
  }

  /**
   * Tests creating, reading, updating and deleting of clients.
   */
  public function testClientCRUD() {
    // Check that the database table exists and is empty.
    $this->assertTrue(db_table_exists('client'), 'The client database table exists.');
    $this->assertClientTableEmpty('The client database is initially empty.');

    // Check if a new client can be saved to the database.
    $values = $this->randomClientValues();
    $client = $this->createClient($values);
    $client->save();
    $this->assertClientTableNotEmpty('The client database table is no longer empty after creating a client.');

    // Check that the client data can be read from the database.
    $retrieved_client = client_load($client->cid);
    $this->assertClientProperties($retrieved_client, $values, 'The client that was saved to the database can be read correctly.');

    // Update the client and check that the new values were written to the
    // database.
    $new_values = $this->randomClientValues();
    $this->updateClient($client, $new_values);
    $client->save();
    $this->assertClientProperties($client, $new_values, 'The client has been updated correctly.');

    // Delete the client. The database should be empty again.
    $client->delete();
    $this->assertClientTableEmpty('The client can be deleted from the database.');
  }

  /**
   * Check if the properties of the given client match the given values.
   *
   * @param Client $client
   *   The Client entity to check.
   * @param array $values
   *   An associative array of values to check, keyed by property name.
   * @param string $message
   *   The message to display along with the assertion.
   * @param string $group
   *   The type of assertion - examples are "Browser", "PHP".
   *
   * @return bool
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  public function assertClientProperties(Client $client, array $values, $message = '', $group = 'Other') {
    return $this->assertEntityProperties('client', $client, $values, $message, $group);
  }

  /**
   * Check if the properties of the given entity match the given values.
   *
   * @param string $entity_type
   *   The type of the entity.
   * @param Entity $entity
   *   The entity to check.
   * @param array $values
   *   An associative array of values to check, keyed by property name.
   * @param string $message
   *   The message to display along with the assertion.
   * @param string $group
   *   The type of assertion - examples are "Browser", "PHP".
   *
   * @return bool
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  public function assertEntityProperties($entity_type, Entity $entity, array $values, $message = '', $group = 'Other') {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);

    $result = TRUE;
    foreach ($values as $property => $value) {
      if (is_array($value)) {
        $result &= $this->assertFalse(array_diff($value, $wrapper->$property->value()), format_string('The %property property has the correct value.', array('%property' => $property)));
      }
      else {
        $result &= $this->assertEqual($wrapper->$property->value(), $value, format_string('The %property property has the correct value.', array('%property' => $property)));
      }
    }

    return $this->assertTrue($result, $message ?: format_string('The @entity contains the given values.', array('@entity' => $entity_type)), $group);
  }

  /**
   * Creates a new client entity with random values.
   *
   * @param array $values
   *   An optional associative array of values, keyed by property name. Random
   *   values will be applied to all omitted properties.
   *
   * @return Client
   *   A new client entity.
   */
  public function createClient(array $values = array()) {
    // Provide some default values.
    $values += $this->randomClientValues();
    $client = client_create();
    $this->updateClient($client, $values);

    return $client;
  }

  /**
   * Updates the given client with the given properties.
   *
   * @param Client $client
   *   The client entity to update.
   * @param array $values
   *   An associative array of values to apply to the entity, keyed by property
   *   name.
   */
  public function updateClient(Client $client, array $values) {
    $wrapper = entity_metadata_wrapper('client', $client);
    foreach ($values as $property => $value) {
      $wrapper->$property->set($value);
    }
  }

}
