<?php

/**
 * @file
 * Contains \BusinessUITestCase.
 */

invoicing_core_autoload();

/**
 * UI tests for the Business module.
 */
class BusinessUITestCase extends InvoicingIntegrationTestCase {

  use \Drupal\invoicing\Traits\BaseTestHelper;
  use \Drupal\invoicing\Traits\BusinessTestHelper {
    randomBusinessValues as traitRandomBusinessValues;
  }

  /**
   * {@inheritdoc}
   */
  protected $usersToCreate = array('administrator');

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'UI test',
      'description' => 'Tests the managing of businesses through the user interface.',
      'group' => 'Invoicing - Business',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setup();

    $this->drupalLogin($this->users['administrator']);
  }

  /**
   * Tests the business form.
   */
  public function testBusinessForm() {
    // Check that the database table exists and is empty.
    $this->assertTrue(db_table_exists('business'), 'The business database table exists.');
    $this->assertBusinessTableEmpty('The business database is initially empty.');

    // Check that error messages are displayed about required fields when
    // creating a new business.
    $this->drupalPost('business/add', array(), t('Save'));
    $required_fields = array('name' => t('Business name'));
    $this->assertRequiredFieldMessages($required_fields);

    // Check form validation errors.
    $invalid_values = array(
      'field_business_email[und][0][email]' => $this->randomString(),
    );
    $messages = array(
      'error' => array(
        t('!name field is required.', array('!name' => t('Business name'))),
        t('"%mail" is not a valid email address', array('%mail' => $invalid_values['field_business_email[und][0][email]']))),
    );
    $this->drupalPost('business/add', $invalid_values, t('Save'));
    $this->assertFieldValidationFailed(array_keys($invalid_values));
    $this->assertStatusMessages($messages);

    // Fill in all the fields and check if they are saved correctly.
    $values = $this->randomBusinessValues();
    $business = $this->createUiBusiness($values);
    $messages = array('status' => array(t('New business %name has been added.', array('%name' => $values['name']))));
    $this->assertStatusMessages($messages);
    $this->assertBusinessTableNotEmpty('The business database table is no longer empty after creating a business.');
    $this->assertBusinessProperties($business, $values, 'The business has been correctly saved to the database.');

    // Check that the form fields have correct values when the business is
    // edited.
    $this->drupalGet('business/' . $business->bid . '/edit');
    $form_values = $this->convertBusinessValuesToFormPostValues($values);
    foreach ($form_values as $name => $value) {
      $this->assertFieldByName($name, $value, format_string('When editing an existing business the %name field has the right value.', array('%name' => $name)));
    }

    // Change the values and check that the entity is correctly updated.
    $new_values = $this->randomBusinessValues();
    $this->drupalPost('business/' . $business->bid . '/edit', $this->convertBusinessValuesToFormPostValues($new_values), t('Save'));
    $business = business_load($business->bid, TRUE);
    $this->assertRaw(t('The changes have been saved.', array('%name' => $values['name'])), 'A message is shown informing the user that the business has been edited.');
    $this->assertBusinessProperties($business, $new_values, 'The updated business has been correctly saved to the database.');

    // Check that the user is redirected to the confirmation page when clicking
    // the 'Delete' button on the business edit page.
    $this->drupalPost('business/' . $business->bid . '/edit', array(), t('Delete'));
    $this->assertUrl('business/' . $business->bid . '/delete', array(), 'The user is redirected to the confirmation form when clicking the "Delete" button in the business edit form.');
    $this->assertRaw(t('Are you sure you want to delete %name?', array('%name' => $business->name)), 'The confirmation message is shown when deleting a user.');
    $this->assertRaw(t('This action cannot be undone.'), 'The disclaimer is shown when deleting a user.');

    // Check that the business can be deleted.
    $this->drupalPost('business/' . $business->bid . '/delete', array(), t('Delete'));
    $this->assertRaw(t('Business %name has been deleted.', array('%name' => $business->name)), 'A message is shown informing the user that the business has been deleted.');
    $this->assertBusinessTableEmpty('The business database is empty after the business has been deleted.');
  }

  /**
   * Tests the business field in the user edit form.
   */
  public function testBusinessesFieldForUser() {
    // Create two businesses.
    $business1 = $this->createUiBusiness();
    $business2 = $this->createUiBusiness();

    // Go to the edit screen of the user.
    $this->drupalGet('user/' . $this->users['administrator']->uid . '/edit');
    $this->assertFieldById('edit-field-user-businesses-und-0-target-id', '', 'The field_user_businesses is shown on the page.');

    // Add the businesses to the user.
    $this->drupalPost(NULL, array('field_user_businesses[und][0][target_id]' => $business1->name . ' (' . $business1->bid . ')'), t('Add another item'));
    $this->assertFieldById('edit-field-user-businesses-und-1-target-id', '', 'The field_user_businesses for a second business is shown on the page.');
    $this->drupalPost(NULL, array('field_user_businesses[und][1][target_id]' => $business2->name . ' (' . $business2->bid . ')'), t('Add another item'));
    $this->assertFieldById('edit-field-user-businesses-und-1-target-id', '', 'The field_user_businesses for a third business is shown on the page.');
    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertRaw('The changes have been saved.', 'The user was saved successfully.');

    // Check that the businesses are linked to the user.
    $user = user_load($this->users['administrator']->uid);
    $this->assertEqual($user->field_user_businesses[LANGUAGE_NONE][0]['target_id'], $business1->bid, 'The first business has been linked to the user.');
    $this->assertEqual($user->field_user_businesses[LANGUAGE_NONE][1]['target_id'], $business2->bid, 'The second business has been linked to the user.');

    // Check that a validation error is displayed if a business is added twice
    // to the same user.
    $this->drupalPost(NULL, array('field_user_businesses[und][2][target_id]' => $business1->name . ' (' . $business1->bid . ')'), t('Add another item'));
    $this->drupalPost(NULL, array(), t('Save'));
    // @todo Replace this with $this->assertFieldValidationFailed() and
    //   $this->assertStatusMessages() when we are using traits.
    // @see http://atrium.pocomas.be/invoicing/node/1161
    $this->assertRaw('field can contain only unique values');
  }

  /**
   * Tests the rendering of the business entity.
   */
  public function testBusinessViewEntity() {
    $business = $this->createUiBusiness();
    $this->drupalGet('business/' . $business->bid);

    // Check that the entity is rendered.
    $this->assertXPathElements($this->getBusinessEntityXpath(), 1, array(), 'The business entity is rendered.');

    // Check that the page title is set to the business name.
    // @todo: Change "Drupal" to the project name.
    // @see http://atrium.pocomas.be/invoicing/node/1169
    $this->assertTitle($business->name . ' | Drupal');

    $xpath = '//h1[@id = "page-title" and contains(text(), :name)]';
    $this->assertXPathElements($xpath, 1, array(':name' => $business->name), 'The page title contains the business name.');

    // Check that all fields are rendered.
    $xpath = '//div[contains(@class, "field-name-field-business-address")]';
    $this->assertXPathElements($this->getBusinessEntityXpath($xpath), 1, array(), 'The address field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-business-email")]';
    $this->assertXPathElements($this->getBusinessEntityXpath($xpath), 1, array(), 'The email field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-business-phone")]';
    $this->assertXPathElements($this->getBusinessEntityXpath($xpath), 1, array(), 'The phone field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-business-vat")]';
    $this->assertXPathElements($this->getBusinessEntityXpath($xpath), 1, array(), 'The vat field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-business-iban")]';
    $this->assertXPathElements($this->getBusinessEntityXpath($xpath), 1, array(), 'The iban field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-business-bic")]';
    $this->assertXPathElements($this->getBusinessEntityXpath($xpath), 1, array(), 'The bic field is rendered.');
    $xpath = '//div[contains(@class, "field-name-field-business-mobile")]';
    $this->assertXPathElements($this->getBusinessEntityXpath($xpath), 1, array(), 'The mobile number field is rendered.');

    // Check if the tabs are rendered.
    $xpath = '//ul[contains(@class, "tabs")]//a[@href=:href]';
    $url = url('business/' . $business->bid);
    $this->assertXPathElements($xpath, 1, array(':href' => $url), 'The business view tab is rendered.');
    $this->assertXPathElements($xpath, 1, array(':href' => $url . '/edit'), 'The business edit tab is rendered.');
    $this->assertXPathElements($xpath, 1, array(':href' => $url . '/delete'), 'The business delete tab is rendered.');
  }

  /**
   * {@inheritdoc}
   */
  public function randomBusinessValues() {
    $values = $this->traitRandomBusinessValues();

    // @todo Support other countries in addition to Belgium.
    $values['field_business_address']['country'] = 'BE';

    return $values;
  }

  /**
   * Constructs an XPath query to find an element on the business entity page.
   *
   * @param string $xpath
   *   The path selector to search for.
   *
   * @return string
   *   The XPath query.
   */
  protected function getBusinessEntityXpath($xpath = '') {
    return '//div[contains(@class, "entity-business")]' . $xpath;
  }

}
