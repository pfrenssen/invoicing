<?php

/**
 * @file
 * Base class for unit tests for the invoicing platform.
 */

class InvoicingWebTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  protected $profile = 'testing';

  /**
   * {@inheritdoc}
   *
   * Outputs a backtrace in addition to the regular error message.
   *
   * @see _drupal_get_last_caller()
   */
  public function errorHandler($severity, $message, $file = NULL, $line = NULL) {
    if ($severity & error_reporting()) {
      $error_map = array(
        E_STRICT => 'Run-time notice',
        E_WARNING => 'Warning',
        E_NOTICE => 'Notice',
        E_CORE_ERROR => 'Core error',
        E_CORE_WARNING => 'Core warning',
        E_USER_ERROR => 'User error',
        E_USER_WARNING => 'User warning',
        E_USER_NOTICE => 'User notice',
        E_RECOVERABLE_ERROR => 'Recoverable error',
      );

      // PHP 5.3 adds new error logging constants. Add these conditionally for
      // backwards compatibility with PHP 5.2.
      if (defined('E_DEPRECATED')) {
        $error_map += array(
          E_DEPRECATED => 'Deprecated',
          E_USER_DEPRECATED => 'User deprecated',
        );
      }

      // Errors that occur inside PHP internal functions do not generate
      // information about file and line. Ignore blacklisted functions.
      $blacklist = array(
        'debug',
        '_drupal_error_handler',
        '_drupal_exception_handler',
      );
      $backtrace = debug_backtrace(NULL);
      while (($backtrace && !isset($backtrace[0]['line'])) || (isset($backtrace[1]['function']) && in_array($backtrace[1]['function'], $blacklist))) {
        array_shift($backtrace);
      }
      $message .= "<br />\nBacktrace:<br />\n";
      foreach (array_reverse($backtrace) as $key => $trace) {
        $message .= $key . ': ';
        $message .= isset($trace['class']) ? $trace['class'] . $trace['type'] . $trace['function'] : $trace['function'];
        $message .= !empty($trace['file']) ? ' in ' . $trace['file'] . ' at line ' . $trace['line'] : '';
        $message .= "<br />\n";
      }
      $this->error($message, $error_map[$severity], _drupal_get_last_caller($backtrace));
    }
    return TRUE;
  }

}
