<?php

/**
 * @file
 * Main functions and hook implementations for the Invoicing Invoice module.
 */

include_once 'invoice.features.inc';

/**
 * Implements hook_entity_info().
 */
function invoice_entity_info() {
  $entity_info = array();

  $entity_info['invoice'] = array(
    'label' => t('Invoice'),
    'plural label' => t('Invoices'),
    'entity class' => 'Invoice',
    'controller class' => 'InvoiceAPIController',
    'base table' => 'invoice',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'iid',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'label callback' => 'invoice_label',
    'uri callback' => 'invoice_uri',
    'access callback' => 'invoice_access',
    'module' => 'invoice',
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('invoice_type', 'ivt')
    ->fields('ivt', array('type', 'name'))
    ->execute()
    ->fetchAllKeyed();

  foreach ($types as $type => $name) {
    $entity_info['invoice']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/invoices/manage/%invoice_type',
        'real path' => 'admin/structure/invoices/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer invoices'),
      ),
    );
  }

  $entity_info['invoice_type'] = array(
    'label' => t('Invoice type'),
    'plural label' => t('Invoice types'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'invoice_type',
    'fieldable' => FALSE,
    'bundle of' => 'invoice',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'type',
      'name' => 'type',
      'label' => 'name',
    ),
    'access callback' => 'invoice_type_access',
    'label callback' => 'invoice_type_label',
    'module' => 'invoice',
    'admin ui' => array(
      'path' => 'admin/structure/invoices',
      'file' => 'invoice.admin.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
  );

  return $entity_info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function invoice_entity_property_info_alter(&$info) {
  // Augment the default information that is provided by entityPropertyInfo().
  // @see EntityDefaultMetadataController::entityPropertyInfo()
  $properties = &$info['invoice']['properties'];

  $properties['type']['description'] = t('The invoice type');
  $properties['type']['options list'] = 'invoice_type_get_names';
  $properties['type']['required'] = TRUE;
  $properties['type']['setter callback'] = 'entity_property_verbatim_set';
  $properties['type']['setter permission'] = 'administer invoices';

  $properties['created']['label'] = t('Date created');
  $properties['created']['description'] = t('The date the invoice was created.');
  $properties['created']['type'] = 'date';
  $properties['created']['setter callback'] = 'entity_property_verbatim_set';
  $properties['created']['setter permission'] = 'administer invoices';

  $properties['changed']['label'] = t('Date changed');
  $properties['changed']['description'] = t('The date the invoice was most recently updated.');
  $properties['changed']['type'] = 'date';
  $properties['changed']['setter callback'] = 'entity_property_verbatim_set';
  $properties['changed']['setter permission'] = 'administer invoices';

  $properties['is_new']['label'] = t('Is new');
  $properties['is_new']['description'] = t('Whether the invoice is new and not saved to the database yet.');
  $properties['is_new']['type'] = 'boolean';
  $properties['is_new']['getter callback'] = 'invoice_entity_metadata_get_properties';

  $properties['bid']['label'] = t('Business');
  $properties['bid']['description'] = t('The business that issued this invoice.');
  $properties['bid']['setter callback'] = 'entity_property_verbatim_set';
  $properties['bid']['setter permission'] = 'administer invoices';
  $properties['bid']['type'] = 'business';
}

/**
 * Implements hook_menu().
 */
function invoice_menu() {
  $items = array();

  // We only support one basic invoice type for the moment. This may be extended
  // in the future.
  $invoice_type = invoice_type_load('invoice');
  $items['invoice/add'] = array(
    'title' => 'Add invoice',
    'page callback' => 'invoice_add_page',
    'page arguments' => array($invoice_type),
    'access callback' => 'invoice_access',
    'access arguments' => array('create', $invoice_type),
    'file' => 'invoice.pages.inc',
  );

  $items['invoice/%invoice/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'invoice_edit_page',
    'page arguments' => array(1),
    'access callback' => 'invoice_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'invoice.pages.inc',
    'weight' => 5,
  );

  $items['invoice/%invoice/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invoice_delete_confirm_form', 1),
    'access callback' => 'invoice_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'invoice.pages.inc',
    'weight' => 10,
  );

  $items['invoice/%invoice/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['invoice/%invoice'] = array(
    'title' => '',
    'page callback' => 'invoice_detail_page',
    'page arguments' => array(1),
    'access callback' => 'invoice_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
    'file' => 'invoice.pages.inc',
  );

  return $items;
}

/**
 * Determines whether the given user has access to an invoice.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $invoice
 *   Optionally an invoice to check access for. If nothing is given, access for
 *   all invoices is determined.
 * @param object $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function invoice_access($op, $invoice = NULL, $account = NULL) {
  if (user_access('administer invoices', $account)) {
    return TRUE;
  }

  if (isset($invoice)) {
    switch ($op) {
      case 'create':
        return user_access('create new invoices', $account);

      case 'delete':
      case 'edit':
      case 'update':
        $access = user_access("edit any $invoice->type invoice", $account);
        $access |= user_access('administer own invoices', $account) && invoice_is_owned_by_user($invoice, $account);
        return $access;

      case 'view':
        $access = user_access("view any $invoice->type invoice", $account);
        $access |= user_access('view own invoices', $account) && invoice_is_owned_by_user($invoice, $account);
        return $access;
    }
  }

  return FALSE;
}

/**
 * Implements hook_permission().
 */
function invoice_permission() {
  $permissions = array(
    'access invoice overview' => array(
      'title' => t('Access invoice overview'),
    ),
    'administer invoices' => array(
      'title' => t('Administer invoices'),
      'description' => t('Create new invoices, and edit and delete all invoices.'),
    ),
    'administer invoice types' => array(
      'title' => t('Administer invoice types'),
      'description' => t('Create and delete fields for invoice types, and set their permissions.'),
    ),
    'create new invoices' => array(
      'title' => t('Create new invoices'),
    ),
    'view own invoices' => array(
      'title' => t('View own invoices'),
    ),
    'administer own invoices' => array(
      'title' => t('Administer own invoices'),
      'description' => t('Edit and delete your own invoices.'),
    ),
  );

  // Generate permissions per invoice type.
  foreach (invoice_get_types() as $type) {
    $permissions += array(
      "edit any $type->type invoice" => array(
        'title' => t('%type_name: Edit any invoice', array('%type_name' => $type->name)),
      ),
      "view any $type->type invoice" => array(
        'title' => t('%type_name: View any invoice', array('%type_name' => $type->name)),
      ),
    );
  }

  return $permissions;
}

/**
 * Access callback for Entity API exportables for invoice types.
 */
function invoice_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer invoice types', $account);
}

/**
 * Returns an array of invoice types, keyed by the type name.
 *
 * @return array
 *   An associative array of invoice types, keyed by invoice type.
 */
function invoice_get_types() {
  $types = &drupal_static(__FUNCTION__);

  if (!$types) {
    $types = db_select('invoice_type', 'ivt')
      ->fields('ivt')
      ->execute()
      ->fetchAllAssoc('type');
  }

  return $types;
}

/**
 * Returns an invoice type by type name.
 *
 * @param string $type
 *   The machine readable name of the invoice type.
 *
 * @return Entity
 *   A invoice type entity, or FALSE if the invoice type does not exist.
 */
function invoice_type_load($type) {
  $types = invoice_get_types();

  return !empty($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Returns a list of invoice type machine names.
 *
 * @return array
 *   An indexed array of invoice type machine names.
 */
function invoice_type_get_names() {
  return array_keys(invoice_get_types());
}

/**
 * Composes the label of an invoice type.
 *
 * @param object $entity
 *   The entity for which to generate the label.
 * @param string $entity_type
 *   The entity type; e.g., 'node' or 'user'.
 *
 * @return string|bool
 *   The entity label or FALSE if not found.
 *
 * @see entity_label()
 */
function invoice_type_label($entity, $entity_type) {
  // If the entity type is being created it does not have a name yet.
  if (empty($entity->is_new)) {
    return $entity->name;
  }
  return FALSE;
}

/**
 * Creates a new invoice entity.
 *
 * @param array $values
 *   An associative array of values to apply to the entity, keyed by property
 *   name.
 *
 * @return Invoice
 *   The new invoice entity.
 */
function invoice_create($values = array()) {
  // Default to the 'invoice' bundle.
  $values += array('type' => 'invoice');
  return entity_get_controller('invoice')->create($values);
}

/**
 * Deletes a invoice.
 *
 * @param Invoice $invoice
 *   The invoice to delete.
 */
function invoice_delete(Invoice $invoice) {
  $invoice->delete();
}

/**
 * Deletes multiple invoices.
 *
 * @param array $iids
 *   An array of invoice IDs.
 */
function invoice_delete_multiple(array $iids) {
  entity_get_controller('invoice')->delete($iids);
}

/**
 * Composes the label of an Invoice.
 *
 * @param object $entity
 *   The entity for which to generate the label.
 * @param string $entity_type
 *   The entity type; e.g., 'node' or 'user'.
 *
 * @return string|bool
 *   The entity label or FALSE if not found.
 *
 * @see entity_label()
 */
function invoice_label($entity, $entity_type) {
  return $entity->iid;
}

/**
 * Saves a invoice to the database.
 *
 * @param Invoice $invoice
 *   The invoice entity.
 *
 * @return mixed
 *   Returns FALSE if the transaction failed. If it succeeded, returns SAVED_NEW
 *   or SAVED_UPDATED, depending on the operation performed.
 */
function invoice_save(Invoice $invoice) {
  return $invoice->save();
}

/**
 * Loads an invoice object from the database.
 *
 * @param int $iid
 *   The invoice ID.
 * @param bool $reset
 *   Whether to reset the cache.
 *
 * @return Invoice|FALSE
 *   A fully-populated invoice object, or FALSE if the invoice is not found.
 *
 * @throws InvalidArgumentException
 *   Thrown when the passed ID is not valid.
 */
function invoice_load($iid, $reset = FALSE) {
  $iid = (int) $iid;
  if (empty($iid)) {
    throw new InvalidArgumentException('Invalid invoice id.');
  }
  $invoices = invoice_load_multiple((array) $iid, $reset);

  return $invoices ? reset($invoices) : FALSE;
}

/**
 * Loads invoices from the database.
 *
 * This function should be used whenever you need to load more than one invoice
 * from the database. Invoices are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @param array $iids
 *   An array of invoice IDs.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return array
 *   An array of invoice objects indexed by iid.
 *
 * @see entity_load()
 * @see EntityFieldQuery
 */
function invoice_load_multiple($iids = array(), $reset = FALSE) {
  return entity_load('invoice', $iids, array(), $reset);
}

/**
 * Implements callback_entity_info_uri().
 */
function invoice_uri(Invoice $invoice) {
  return array(
    'path' => 'invoice/' . $invoice->iid,
  );
}

/**
 * Creates a invoice type.
 *
 * @param string $type
 *   The machine readable name of the invoice type.
 * @param string $name
 *   The human readable name of the invoice type.
 */
function invoice_type_create($type, $name) {
  db_insert('invoice_type')
    ->fields(array(
      'type' => $type,
      'name' => $name,
    ))
    ->execute();
}

/**
 * Callback for getting invoice properties.
 *
 * @see invoice_entity_property_info()
 */
function invoice_entity_metadata_get_properties(Invoice $invoice, array $options, $name, $entity_type, $info) {
  switch ($name) {
    case 'is_new':
      return empty($invoice->iid) || !empty($invoice->is_new);
  }
}

/**
 * Returns whether a given invoice is owned by a given user.
 *
 * @param Invoice $invoice
 *   The invoice to check.
 * @param \stdClass $account
 *   Optional user account to check. Defaults to the currently logged in user.
 *
 * @return bool
 *   TRUE if the invoice is owned by the user, FALSE otherwise.
 */
function invoice_is_owned_by_user(Invoice $invoice, \stdClass $account = NULL) {
  // Default to the logged in user.
  global $user;
  $account = $account ?: $user;

  return in_array($invoice->bid, array_keys(business_get_businesses_from_user($account)));
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function invoice_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'client/add' on the Clients overview.
  if ($root_path == 'invoices') {
    $item = menu_get_item('invoice/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * The class used for invoice entities.
 *
 * @param array $field_invoice_client
 * @param array $field_invoice_date
 * @param array $field_invoice_discount
 * @param array $field_invoice_due_date
 * @param array $field_invoice_number
 * @param array $field_invoice_po_number
 * @param array $field_invoice_products
 * @param array $field_invoice_services
 * @param array $field_invoice_status
 * @param array $field_invoice_terms
 */
class Invoice extends Entity {

  /**
   * The primary identifier for an invoice.
   */
  public $iid;

  /**
   * The type of this invoice.
   */
  public $type;

  /**
   * The identifier of the business.
   */
  public $bid;

  /**
   * The Unix timestamp when the invoice was created.
   */
  public $created;

  /**
   * The Unix timestamp when the invoice was most recently saved.
   */
  public $changed;

  /**
   * {@inheritdoc}
   */
  public function save() {
    // Set created and changed values. Only set the created value if it is new.
    if (empty($this->created) && (!empty($this->is_new) || !$this->iid)) {
      $this->created = REQUEST_TIME;
    }
    $this->changed = REQUEST_TIME;

    $return = parent::save();

    // The 'discount' field is casted to a float by number_field_presave().
    // Ensure the type is consistent with the value as loaded from the database
    // by casting it back to a string.
    // @see number_field_presave()
    if (!empty($this->field_invoice_discount[LANGUAGE_NONE][0]['value'])) {
      $this->field_invoice_discount[LANGUAGE_NONE][0]['value'] = (string) $this->field_invoice_discount[LANGUAGE_NONE][0]['value'];
    }

    return $return;
  }

}

/**
 * The Invoice Entity API controller class.
 */
class InvoiceAPIController extends EntityAPIController {

  /**
   * {@inheritdoc}
   */
  public function create(array $values = array()) {
    // Set the business id to the active business of the logged in user.
    $business = business_get_active_business();
    if ($business instanceof Business) {
      $values += array('bid' => $business->bid);
    }
    return parent::create($values);
  }

}
