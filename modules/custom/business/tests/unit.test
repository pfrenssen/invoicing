<?php

/**
 * @file
 * Unit tests for the Business module.
 */

module_load_include('inc', 'test_traits', 'base');
module_load_include('inc', 'test_traits', 'business');

class BusinessUnitTestCase extends DrupalWebTestCase {
  use BaseTestHelper;
  use BusinessTestHelper;

  /**
   * {@inheritdoc}
   */
  protected $profile = 'testing';

  /**
   * Test user accounts.
   *
   * @var array
   *   An array of user objects.
   */
  protected $users;

  /**
   * Test business entities.
   *
   * @var Business[]
   *   An array of Business entities.
   */
  protected $businesses;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Unit test',
      'description' => 'Unit tests for the business module.',
      'group' => 'Business',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setup('business');

    // Create some test users and businesses. Link two businesses to the first
    // user and one business to the second user. A third user is created without
    // any businesses.
    $this->businesses = array();
    $this->users = array();
    for ($user_key = 0; $user_key < 3; $user_key++) {
      $this->users[$user_key] = $this->drupalCreateUser();
      for ($business_count = 2 - $user_key; $business_count > 0; $business_count--) {
        $business = $this->createBusiness();
        $business->save();
        $this->businesses[] = $business;
        $this->users[$user_key]->field_user_businesses[LANGUAGE_NONE][]['target_id'] = $business->bid;
        user_save($this->users[$user_key]);
      }
    }
  }

  /**
   * Tests the business field in the user edit form.
   */
  public function testBusinessGetBusinessesFromUser() {
    global $user;

    $business_key = 0;
    for ($user_key = 0; $user_key < 2; $user_key++) {
      // Compile a list of business ids for the user with key $user_key.
      $bids = array();
      for ($business_count = 2 - $user_key; $business_count > 0; $business_count--) {
        $bids[] = $this->businesses[$business_key++]->bid;
      }
      // Check that the right businesses are returned for each user.
      $this->assertBusinessGetBusinessFromUser($this->users[$user_key]->uid, $bids);

      // Check that the businesses owned by the global $user are returned by
      // default.
      $user = user_load($this->users[$user_key]->uid);
      $this->assertBusinessGetBusinessFromUser(NULL, $bids);
    }
  }

  /**
   * Checks the output of business_get_businesses_from_user().
   *
   * @param int $uid
   *   The user id to pass to the function.
   * @param array $bids
   *   An array of business ids which represent the businesses that are expected
   *   to be returned.
   */
  protected function assertBusinessGetBusinessFromUser($uid = NULL, $bids = array()) {
    $businesses = business_get_businesses_from_user($uid);
    $this->assertEqual(count($businesses), count($bids), 'The user has been linked to correct number of businesses.');
    $keys = array_keys($businesses);
    $this->assertEqual($keys, $bids, 'The correct array keys are used.');

    foreach ($businesses as $business) {
      $this->assertTrue($business instanceof Business, 'An array of Business entities is returned.');
      $key = array_shift($bids);
      $this->assertEqual($key, $business->bid, 'The correct Business entities are returned.');
    }
  }

}
