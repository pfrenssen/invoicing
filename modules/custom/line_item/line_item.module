<?php

/**
 * @file
 * Main functions and hook implementations for the Invoicing Line Item module.
 */

include_once 'line_item.features.inc';

/**
 * Implements hook_entity_info().
 */
function line_item_entity_info() {
  $entity_info = array();

  $entity_info['line_item'] = array(
    'label' => t('Line item'),
    'plural label' => t('Line items'),
    'entity class' => 'LineItem',
    'controller class' => 'LineItemAPIController',
    'base table' => 'line_item',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'lid',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'label callback' => 'line_item_label',
    'uri callback' => 'line_item_uri',
    'access callback' => 'line_item_access',
    'module' => 'line_item',
    'inline entity form' => array(
      'controller' => 'LineItemInlineEntityFormController',
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('line_item_type', 'lit')
    ->fields('lit', array('type', 'name'))
    ->execute()
    ->fetchAllKeyed();

  foreach ($types as $type => $name) {
    $entity_info['line_item']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/line_items/manage/%line_item_type',
        'real path' => 'admin/structure/line_items/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer line items'),
      ),
    );
  }

  $entity_info['line_item_type'] = array(
    'label' => t('Line item type'),
    'plural label' => t('Line item types'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'line_item_type',
    'fieldable' => FALSE,
    'bundle of' => 'line_item',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'type',
      'name' => 'type',
      'label' => 'name',
    ),
    'access callback' => 'line_item_type_access',
    'label callback' => 'line_item_type_label',
    'module' => 'line_item',
    'admin ui' => array(
      'path' => 'admin/structure/line_items',
      'file' => 'line_item.admin.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
  );

  return $entity_info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function line_item_entity_property_info_alter(&$info) {
  // Augment the default information that is provided by entityPropertyInfo().
  // @see EntityDefaultMetadataController::entityPropertyInfo()
  $properties = &$info['line_item']['properties'];

  $properties['type']['description'] = t('The line item type');
  $properties['type']['options list'] = 'line_item_type_get_names';
  $properties['type']['required'] = TRUE;
  $properties['type']['setter callback'] = 'entity_property_verbatim_set';
  $properties['type']['setter permission'] = 'administer line items';

  $properties['created']['label'] = t('Date created');
  $properties['created']['description'] = t('The date the line item was created.');
  $properties['created']['type'] = 'date';
  $properties['created']['setter callback'] = 'entity_property_verbatim_set';
  $properties['created']['setter permission'] = 'administer line items';

  $properties['changed']['label'] = t('Date changed');
  $properties['changed']['description'] = t('The date the line item was most recently updated.');
  $properties['changed']['type'] = 'date';

  $properties['is_new']['label'] = t('Is new');
  $properties['is_new']['description'] = t('Whether the line item is new and not saved to the database yet.');
  $properties['is_new']['type'] = 'boolean';
  $properties['is_new']['getter callback'] = 'line_item_entity_metadata_get_properties';

  $properties['bid']['label'] = t('Business');
  $properties['bid']['description'] = t('The business for which this line item was created.');
  $properties['bid']['setter callback'] = 'entity_property_verbatim_set';
  $properties['bid']['setter permission'] = 'administer line items';
  $properties['bid']['type'] = 'business';
}

/**
 * Determines whether the given user has access to a line item.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $line_item
 *   Optionally a line item to check access for. If nothing is given, access for
 *   all line items is determined.
 * @param object $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function line_item_access($op, $line_item = NULL, $account = NULL) {
  if (user_access('administer line items', $account)) {
    return TRUE;
  }

  if ($op == 'create') {
    $access = user_access('create new line items', $account);
    $access |= user_access('administer own line items', $account);
    return $access;
  }

  if (!empty($line_item)) {
    switch ($op) {
      case 'delete':
      case 'update':
        $access = user_access("edit any $line_item->type line item", $account);
        $access |= user_access('administer own line items', $account) && line_item_is_owned_by_user($line_item, $account);
        return $access;

      case 'view':
        $access = user_access("view any $line_item->type line item", $account);
        $access |= user_access('view own line items', $account) && line_item_is_owned_by_user($line_item, $account);
        return $access;
    }
  }

  return FALSE;
}

/**
 * Implements hook_permission().
 */
function line_item_permission() {
  $permissions = array(
    'administer line items' => array(
      'title' => t('Administer line items'),
      'description' => t('Create new line items, and edit and delete all line items.'),
    ),
    'administer line item types' => array(
      'title' => t('Administer line item types'),
      'description' => t('Create and delete fields for line item types, and set their permissions.'),
    ),
    'create new line items' => array(
      'title' => t('Create new line items'),
    ),
    'view own line items' => array(
      'title' => t('View own line items'),
    ),
    'administer own line items' => array(
      'title' => t('Administer own line items'),
      'description' => t('Edit and delete your own line items.'),
    ),
    'administer tax rates' => array(
      'title' => t('Administer tax rates'),
      'description' => t('Create new tax rates, and edit and delete all tax rates.'),
    ),
    'create new tax rates' => array(
      'title' => t('Create new tax rates'),
    ),
    'view own tax rates' => array(
      'title' => t('View own tax rates'),
    ),
    'administer own tax rates' => array(
      'title' => t('Administer own tax rates'),
      'description' => t('Edit and delete your own tax rates.'),
    ),
  );

  // Generate permissions per line item type.
  foreach (line_item_get_types() as $type) {
    $permissions += array(
      "edit any $type->type line item" => array(
        'title' => t('%type_name: Edit any line item', array('%type_name' => $type->name)),
      ),
      "view any $type->type line item" => array(
        'title' => t('%type_name: View any line item', array('%type_name' => $type->name)),
      ),
    );
  }

  return $permissions;
}

/**
 * Access callback for Entity API exportables for line item types.
 */
function line_item_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer line item types', $account);
}

/**
 * Returns an array of line item types, keyed by the type name.
 *
 * @return array
 *   An associative array of line item types, keyed by line item type.
 */
function line_item_get_types() {
  $types = &drupal_static(__FUNCTION__);

  if (!$types) {
    $types = db_select('line_item_type', 'lit')
      ->fields('lit')
      ->execute()
      ->fetchAllAssoc('type');
  }

  return $types;
}

/**
 * Returns an line item type by type name.
 *
 * @param string $type
 *   The machine readable name of the line item type.
 *
 * @return Entity
 *   A line item type entity, or FALSE if the line item type does not exist.
 */
function line_item_type_load($type) {
  $types = line_item_get_types();

  return !empty($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Returns a list of line item type machine names.
 *
 * @return array
 *   An indexed array of line item type machine names.
 */
function line_item_type_get_names() {
  return array_keys(line_item_get_types());
}

/**
 * Creates a new line item entity.
 *
 * @param array $values
 *   An associative array of values to apply to the entity, keyed by property
 *   name.
 *
 * @return LineItem
 *   The new line item entity.
 *
 * @throws Exception
 *   Thrown when it is given a missing or invalid item bundle.
 */
function line_item_create($values = array()) {
  if (empty($values['type'])) {
    throw new Exception(t('Invalid or missing line item bundle given.'));
  }
  return entity_get_controller('line_item')->create($values);
}

/**
 * Deletes a line item.
 *
 * @param LineItem $line_item
 *   The line item to delete.
 */
function line_item_delete(LineItem $line_item) {
  $line_item->delete();
}

/**
 * Deletes multiple line items.
 *
 * @param array $lids
 *   An array of line item IDs.
 */
function line_item_delete_multiple(array $lids) {
  entity_get_controller('line_item')->delete($lids);
}

/**
 * Composes the label of a line item.
 *
 * @see entity_label()
 *
 * @param object $entity
 *   The entity for which to generate the label.
 * @param string $entity_type
 *   The entity type; e.g., 'node' or 'user'.
 *
 * @return string|bool
 *   The entity label or FALSE if not found.
 */
function line_item_label($entity, $entity_type) {
  return $entity->lid;
}

/**
 * Saves a line item to the database.
 *
 * @param LineItem $line_item
 *   The line item entity.
 *
 * @return mixed
 *   Returns FALSE if the transaction failed. If it succeeded, returns SAVED_NEW
 *   or SAVED_UPDATED, depending on the operation performed.
 */
function line_item_save(LineItem $line_item) {
  return $line_item->save();
}

/**
 * Loads a line item object from the database.
 *
 * @param int $lid
 *   The line item ID.
 * @param bool $reset
 *   Whether to reset the cache.
 *
 * @return LineItem|FALSE
 *   A fully-populated line item object, or FALSE if the line item is not found.
 *
 * @throws InvalidArgumentException
 *   Thrown when the passed ID is not valid.
 */
function line_item_load($lid, $reset = FALSE) {
  $lid = (int) $lid;
  if (empty($lid)) {
    throw new InvalidArgumentException('Invalid line item ID.');
  }
  $line_items = line_item_load_multiple((array) $lid, $reset);

  return $line_items ? reset($line_items) : FALSE;
}

/**
 * Loads line items from the database.
 *
 * This function should be used whenever you need to load more than one line
 * item from the database. Line items are loaded into memory and will not
 * require database access if loaded again during the same page request.
 *
 * @see entity_load()
 * @see EntityFieldQuery
 *
 * @param array $lids
 *   An array of line item IDs.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return array
 *   An array of line item objects indexed by lid.
 */
function line_item_load_multiple($lids = array(), $reset = FALSE) {
  return entity_load('line_item', $lids, array(), $reset);
}

/**
 * Implements callback_entity_info_uri().
 */
function line_item_uri(LineItem $line_item) {
  return array(
    'path' => 'line_item/' . $line_item->lid,
  );
}

/**
 * Creates a line item type.
 *
 * @param string $type
 *   The machine readable name of the line item type.
 * @param string $name
 *   The human readable name of the line item type.
 */
function line_item_type_create($type, $name) {
  db_insert('line_item_type')
    ->fields(array(
      'type' => $type,
      'name' => $name,
    ))
    ->execute();
}

/**
 * Composes the label of a line item type.
 *
 * @see entity_label()
 *
 * @param object $entity
 *   The entity for which to generate the label.
 * @param string $entity_type
 *   The entity type; e.g., 'node' or 'user'.
 *
 * @return string|bool
 *   The entity label or FALSE if not found.
 */
function line_item_type_label($entity, $entity_type) {
  // If the entity type is being created it does not have a name yet.
  if (empty($entity->is_new)) {
    return $entity->name;
  }
  return FALSE;
}

/**
 * Returns whether a given line item is owned by a given user.
 *
 * @param LineItem $line_item
 *   The line item to check.
 * @param object $account
 *   Optional user account to check. Defaults to the currently logged in user.
 *
 * @return bool
 *   TRUE if the line item is owned by the user, FALSE otherwise.
 */
function line_item_is_owned_by_user(LineItem $line_item, stdClass $account = NULL) {
  // Default to the logged in user.
  global $user;
  $account = $account ?: $user;

  $line_item = entity_metadata_wrapper('line_item', $line_item);
  return in_array($line_item->bid->value(), array_keys(business_get_businesses_from_user($account)));
}

/**
 * Callback for getting line item properties.
 *
 * @see line_item_entity_property_info()
 */
function line_item_entity_metadata_get_properties(LineItem $line_item, array $options, $name, $entity_type, $info) {
  switch ($name) {
    case 'is_new':
      return empty($line_item->lid) || !empty($line_item->is_new);
  }
}

/**
 * Implements hook_menu().
 */
function line_item_menu() {
  $items = array();

  $items['settings/tax-rates/add'] = array(
    'title' => 'Add tax rate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('line_item_edit_tax_rate_form'),
    'access callback' => 'line_item_tax_rate_access',
    'access arguments' => array('create'),
    'file' => 'line_item.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['settings/tax-rates/%line_item_tax_rate/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('line_item_delete_tax_rate_confirm_form', 2),
    'access callback' => 'line_item_tax_rate_access',
    'access arguments' => array('delete', 2),
    'file' => 'line_item.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['settings/tax-rates/%line_item_tax_rate/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('line_item_edit_tax_rate_form', 2),
    'access callback' => 'line_item_tax_rate_access',
    'access arguments' => array('update', 2),
    'file' => 'line_item.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['settings/tax-rates/autocomplete/%'] = array(
    'page callback' => 'line_item_tax_rate_autocomplete',
    'page arguments' => array(3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'line_item.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function line_item_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'settings/tax-rates/add' on the tax rates overview.
  if ($root_path == 'settings/tax-rates') {
    $item = menu_get_item('settings/tax-rates/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function line_item_field_widget_info() {
  return array(
    'line_item_tax_rate' => array(
      'label' => t('Tax rate'),
      'description' => t('Tax rate decimal field type widget'),
      'field types' => array('number_decimal'),
      'settings' => array('size' => 7),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements function hook_field_widget_form().
 */
function line_item_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] == 'line_item_tax_rate') {
    $element['value'] = array(
      '#title' => t('Tax rate'),
      '#type' => 'textfield',
      '#maxlength' => 7,
      '#autocomplete_path' => 'settings/tax-rates/autocomplete',
      '#default_value' => !empty($items[$delta]['value']) ? $items[$delta]['value'] : '',
      '#description' => t('Tax rate percentage'),
      '#required' => FALSE,
    );
  }

  return $element;
}

/**
 * Returns an array of TaxRate related to the active business.
 *
 * @return array
 *   An array of TaxRate keyed by 'tid' and related to the active business.
 *
 * @throws Exception
 *   Thrown when the active business ID is empty.
 */
function line_item_get_tax_rates_by_active_business() {
  $business = business_get_active_business();
  if (!$business) {
    throw new Exception('Missing business identifier.');
  }

  $result = db_select('tax_rates', 'tr')
    ->fields('tr')
    ->condition('bid', $business->bid, '=')
    ->execute()
    ->fetchAllAssoc('tid');

  $tax_rates = &drupal_static(__FUNCTION__, array());
  if (!empty($result)) {
    foreach ($result as $tid => $value) {
      $tax_rate = line_item_tax_rate_load($tid);
      $tax_rates[$tid] = $tax_rate->rate;
    }
  }

  return $tax_rates;
}

/**
 * Loads the tax rate from the {tax_rates} table.
 *
 * @param int $tid
 *   The ID of the tax rate.
 *
 * @return TaxRate
 *   The tax rate object retrieved from the database.
 *
 * @throws InvalidArgumentException
 *   Thrown when the tax rate ID is invalid or empty.
 */
function line_item_tax_rate_load($tid) {
  if (empty($tid)) {
    throw new InvalidArgumentException('Missing tax rate ID.');
  }

  $result = db_select('tax_rates', 'tr')
    ->fields('tr')
    ->condition('tid', $tid, '=')
    ->execute()
    ->fetchAllAssoc('tid');

  if (!empty($result[$tid])) {
    $tax_rate = $result[$tid];
    return new TaxRate($tax_rate->bid, $tax_rate->name, $tax_rate->rate, $tid);
  }
  else {
    throw new InvalidArgumentException('Invalid tax rate ID.');
  }
}

/**
 * Saves the tax rate to the database.
 *
 * @param TaxRate $tax_rate
 *   The tax rate object to save.
 *
 * @return int
 *   The tax rate ID of the saved tax rate.
 *
 * @throws Exception
 *   Thrown when the required business ID property is missing.
 */
function line_item_tax_rate_save(TaxRate $tax_rate) {
  // Set a default business ID.
  if (!isset($tax_rate->bid)) {
    throw new Exception('No business given to link the tax rate to.');
  }

  // If no TID, create a new tax rate. Otherwise update the tax rate.
  if (empty($tax_rate->tid)) {
    $tid = db_insert('tax_rates')
      ->fields(array(
        'name' => $tax_rate->name,
        'rate' => $tax_rate->rate,
        'bid' => $tax_rate->bid,
      ))
      ->execute();
  }
  else {
    db_update('tax_rates')
      ->fields(array(
        'name' => $tax_rate->name,
        'rate' => $tax_rate->rate,
        'bid' => $tax_rate->bid,
      ))
      ->condition('tid', $tax_rate->tid, '=')
      ->execute();

    $tid = $tax_rate->tid;
  }

  return $tid;
}

/**
 * Returns whether a given tax rate is owned by a given user.
 *
 * @param TaxRate $tax_rate
 *   The tax rate to check.
 * @param object $account
 *   Optional user account to check. Defaults to the currently logged in user.
 *
 * @return bool
 *   TRUE if the tax rate is owned by the user, FALSE otherwise.
 */
function line_item_tax_rate_is_owned_by_user(TaxRate $tax_rate, stdClass $account = NULL) {
  // Default to the logged in user.
  global $user;
  $account = $account ?: $user;

  return in_array($tax_rate->bid, array_keys(business_get_businesses_from_user($account)));
}

/**
 * Determines whether the given user has access to a tax rate.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'.
 * @param TaxRate $tax_rate
 *   Optionally a tax rate to check access for. If nothing is given, access for
 *   all tax rates is determined.
 * @param object $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function line_item_tax_rate_access($op, TaxRate $tax_rate = NULL, stdClass $account = NULL) {
  if (user_access('administer tax rates', $account)) {
    return TRUE;
  }

  if ($op == 'create') {
    $access = user_access('create new tax rates', $account);
    $access |= user_access('administer own tax rates', $account);
    return $access;
  }

  if (!empty($tax_rate) && line_item_tax_rate_is_owned_by_user($tax_rate, $account)) {
    switch ($op) {
      case 'delete':
      case 'update':
        return user_access('administer own tax rates', $account);

      case 'view':
        return user_access('view own tax rates', $account);
    }
  }

  return FALSE;
}

/**
 * Deletes the tax rate.
 *
 * @param TaxRate $tax_rate
 *   The tax rate that needs to be deleted.
 */
function line_item_tax_rate_delete(TaxRate $tax_rate) {
  db_delete('tax_rates')
    ->condition('tid', $tax_rate->tid, '=')
    ->execute();
}

/**
 * The class used for line item entities.
 */
class LineItem extends Entity {

  /**
   * The primary identifier for a line item.
   */
  public $lid;

  /**
   * The type of this line item.
   */
  public $type;

  /**
   * The identifier of the business.
   */
  public $bid;

  /**
   * The Unix timestamp when the line item was created.
   */
  public $created;

  /**
   * The Unix timestamp when the line item was most recently saved.
   */
  public $changed;

  /**
   * {@inheritdoc}
   */
  public function save() {
    // Set created and changed values. Only set the created value if it is new.
    if (empty($this->created) && (!empty($this->is_new) || !$this->lid)) {
      $this->created = REQUEST_TIME;
    }
    $this->changed = REQUEST_TIME;

    return parent::save();
  }

}

/**
 * The Line Item Entity API controller class.
 */
class LineItemAPIController extends EntityAPIController {

  /**
   * {@inheritdoc}
   */
  public function create(array $values = array()) {
    // Set the business ID to the active business of the logged in user.
    $business = business_get_active_business();
    if ($business instanceof Business) {
      $values += array('bid' => $business->bid);
    }
    return parent::create($values);
  }

}

/**
 * The Line Item Inline Entity Form controller class.
 */
class LineItemInlineEntityFormController extends EntityInlineEntityFormController {
}

/**
 * A tax rate field on a line item.
 */
class TaxRate {

  /**
   * The tax rate identifier.
   */
  protected $tid;

  /**
   * The business identifier.
   */
  protected $bid;

  /**
   * The human readable name associated with the tax rate.
   */
  protected $name;

  /**
   * The tax rate, which is a decimal number representing a percentage.
   */
  protected $rate;

  /**
   * The TaxRate class constructor.
   *
   * @param int $bid
   *   The business identifier.
   * @param string $name
   *   The human readable name associated with the tax rate.
   * @param float $rate
   *   The tax rate, which is a decimal number representing a percentage.
   * @param int $tid
   *   The tax rate identifier.
   */
  public function __construct($bid, $name, $rate, $tid = NULL) {
    $this->tid = $tid;
    $this->bid = $bid;
    $this->name = $name;
    $this->rate = $rate;
  }

  /**
   * Magic getter. Returns the requested property.
   *
   * @param string $property
   *   The requested property. One of 'tid', 'bid', 'name', 'rate'.
   *
   * @throws InvalidArgumentException
   *   Thrown when a non-existing property is accessed.
   */
  public function __get($property) {
    if (property_exists($this, $property)) {
      return $this->$property;
    }
    else {
      throw new InvalidArgumentException('Non-existing property ' . $property . ' is accessed.');
    }
  }

  /**
   * Returns TRUE if the property is set, FALSE otherwise.
   *
   * @param string $property
   *   The property that is checked. One of 'tid', 'bid', 'name', 'rate'.
   *
   * @return bool
   *   TRUE if the property is set, FALSE otherwise.
   */
  public function __isset($property) {
    return $this->{$property} !== NULL;
  }
}
