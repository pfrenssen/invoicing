<?php

/**
 * @file
 * Tests the client overview.
 */

module_load_include('inc', 'test_traits', 'base');
module_load_include('inc', 'test_traits', 'client');

class ClientOverviewTestCase extends DrupalWebTestCase {
  use BaseTestHelper;
  use ClientTestHelper;

  /**
   * A test user.
   *
   * @var object
   */
  protected $user;

  /**
   * An array of test clients.
   *
   * @var array
   */
  protected $clients;

  /**
   * {@inheritdoc}
   */
  protected $profile = 'testing';

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Overview test',
      'description' => 'Tests the client overview.',
      'group' => 'Client',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setup('client');

    // Create a test user and log in.
    $permissions = array(
      'access client overview',
      'administer own clients',
    );
    $this->user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->user);

    // Create a number of test clients.
    for ($i = 0; $i < 20; $i++) {
      // Make sure the client name starts with letters to avoid random test
      // failures to due differences in sorting of special characters between
      // PHP and the database. PHP uses the system locale to determine the
      // collation, while the database can be configured with an arbitrary
      // collation.
      $name = $this->randomName(4) . $this->randomString();
      $client = $this->createClient(array('name' => $name));
      $client->save();
      $this->clients[$client->cid] = $client;
    }
  }

  /**
   * Tests the client overview.
   *
   * @var SimpleXMLElement $tablerow
   */
  public function testOverview() {
    $this->drupalGet('clients');
    $this->assertResponse(200, 'The client overview is accessible.');

    // Check that the "Add client" local action is present.
    $xpath = '//ul[@class="action-links"]/li/a[@href="/client/add" and contains(text(), :text)]';
    $this->assertXPathElements($xpath, 1, array(':text' => t('Add client')), 'The "Add client" local action is present.');

    // Check that the pager is not present. We added 20 clients which is the
    // maximum number that fits on one page.
    $this->assertNoPager().

    // Check that the clients are present in the overview in alphabetical order.
    uasort($this->clients, function ($a, $b) {
      return strcasecmp($a->name, $b->name);
    });

    // Loop over the displayed table rows and compare them with each client in
    // order.
    $tablerows = $this->xpath('//div[contains(@class, "view-clients")]//table/tbody/tr');
    foreach ($tablerows as $tablerow) {
      /* @var $tablerow SimpleXMLElement */
      /* @var $client EntityDrupalWrapper */
      $client = entity_metadata_wrapper('client', array_shift($this->clients));

      $testcases = array(
        array(
          'message' => 'The first column contains the client name.',
          'expected' => $client->name->value(),
          'actual' => (string) $tablerow->td[0]->a,
        ),
        array(
          'message' => 'The first column is linked to the client detail page.',
          'expected' => '/client/' . $client->getIdentifier(),
          'actual' => (string) $tablerow->td[0]->a['href'],
        ),
        array(
          'message' => 'The second column contains the email address.',
          'expected' => $client->field_client_email->value(),
          'actual' => (string) $tablerow->td[1]->a,
        ),
        array(
          'message' => 'The second column is linked to the email address.',
          'expected' => 'mailto:' . $client->field_client_email->value(),
          'actual' => (string) $tablerow->td[1]->a['href'],
        ),
        array(
          'message' => 'The third column contains the phone number.',
          'expected' => $client->field_client_phone->value(),
          'actual' => (string) $tablerow->td[2],
        ),
        array(
          'message' => 'The fourth column contains the website.',
          'expected' => $client->field_client_website->value(),
          'actual' => (string) $tablerow->td[3]->a,
        ),
        array(
          'message' => 'The fourth column is linked to the website.',
          'expected' => 'mailto:' . $client->field_client_website->value(),
          'actual' => (string) $tablerow->td[3]->a['href'],
        ),
        array(
          'message' => 'The fifth column contains the "edit" action link.',
          'expected' => t('edit'),
          'actual' => (string) $tablerow->td[4]->a[0],
        ),
        array(
          'message' => 'The fifth column is linked to the client edit page.',
          'expected' => '/client/' . $client->getIdentifier() . '/edit',
          'actual' => (string) $tablerow->td[4]->a[0]['href'],
        ),
      );

      foreach ($testcases as $testcase) {
        $this->assertEqual(trim($testcase['expected']), trim($testcase['actual']), $testcase['message']);
      }
    }

    // Check that all clients were displayed.
    $this->assertFalse($this->clients, 'All clients are shown in the table.');

    // Add one more client and assert that a pager now appears.
    $this->createClient()->save();
    $this->drupalGet('clients');
    $this->assertPager();
  }

}
