<?php

/**
 * @file
 * Main functions and hook implementations for the Invoicing Client module.
 */

include_once 'client.features.inc';

/**
 * Implements hook_entity_info().
 */
function client_entity_info() {
  $entity_info = array();

  $entity_info['client'] = array(
    'label' => t('Client'),
    'plural label' => t('Clients'),
    'entity class' => 'Client',
    'controller class' => 'ClientAPIController',
    'base table' => 'client',
    'revision table' => 'client_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'cid',
      'bundle' => 'type',
      'revision' => 'vid',
      'label' => 'name',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'label callback' => 'client_label',
    'uri callback' => 'client_uri',
    'access callback' => 'client_access',
    'module' => 'client',
    'inline entity form' => array(
      'controller' => 'ClientInlineEntityFormController',
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('client_type', 'ict')
    ->fields('ict', array('type', 'name'))
    ->execute()
    ->fetchAllKeyed();

  foreach ($types as $type => $name) {
    $entity_info['client']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/clients/manage/%client_type',
        'real path' => 'admin/structure/clients/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer clients'),
      ),
    );
  }

  $entity_info['client_type'] = array(
    'label' => t('Client type'),
    'plural label' => t('Client types'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'client_type',
    'fieldable' => FALSE,
    'bundle of' => 'client',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'type',
      'name' => 'type',
      'label' => 'name',
    ),
    'access callback' => 'client_type_access',
    'label callback' => 'client_type_label',
    'module' => 'client',
    'admin ui' => array(
      'path' => 'admin/structure/clients',
      'file' => 'client.admin.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
  );

  return $entity_info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function client_entity_property_info_alter(&$info) {
  // Augment the default information that is provided by entityPropertyInfo().
  // @see EntityDefaultMetadataController::entityPropertyInfo()
  $properties = &$info['client']['properties'];

  $properties['type']['description'] = t('The client type');
  $properties['type']['options list'] = 'client_type_get_names';
  $properties['type']['required'] = TRUE;
  $properties['type']['setter callback'] = 'entity_property_verbatim_set';
  $properties['type']['setter permission'] = 'administer clients';

  $properties['name']['description'] = t('The name of the client.');
  $properties['name']['required'] = TRUE;
  $properties['name']['setter callback'] = 'entity_property_verbatim_set';

  $properties['created']['label'] = t('Date created');
  $properties['created']['description'] = t('The date the client was created.');
  $properties['created']['type'] = 'date';
  $properties['created']['setter callback'] = 'entity_property_verbatim_set';
  $properties['created']['setter permission'] = 'administer clients';

  $properties['changed']['label'] = t('Date changed');
  $properties['changed']['description'] = t('The date the client was most recently updated.');
  $properties['changed']['type'] = 'date';
  $properties['changed']['setter callback'] = 'entity_property_verbatim_set';
  $properties['changed']['setter permission'] = 'administer clients';

  $properties['is_new']['label'] = t('Is new');
  $properties['is_new']['description'] = t('Whether the client is new and not saved to the database yet.');
  $properties['is_new']['type'] = 'boolean';
  $properties['is_new']['getter callback'] = 'client_entity_metadata_get_properties';

  $properties['bid']['label'] = t('Business');
  $properties['bid']['description'] = t('The business this client belongs to.');
  $properties['bid']['setter callback'] = 'entity_property_verbatim_set';
  $properties['bid']['setter permission'] = 'administer clients';
  $properties['bid']['type'] = 'business';
}

/**
 * Implements hook_menu().
 */
function client_menu() {
  $items = array();

  // We only support one basic client type for the moment. This may be extended
  // in the future.
  $items['client/add'] = array(
    'title' => 'Add client',
    'page callback' => 'client_add_page',
    'access callback' => 'client_access',
    'access arguments' => array('create'),
    'file' => 'client.pages.inc',
  );

  $items['client/%client/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'client_edit_page',
    'page arguments' => array(1),
    'access callback' => 'client_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'client.pages.inc',
    'weight' => 5,
  );

  $items['client/%client/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('client_delete_confirm_form', 1),
    'access callback' => 'client_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'client.pages.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function client_permission() {
  $permissions = array(
    'access client overview' => array(
      'title' => t('Access client overview'),
    ),
    'administer client types' => array(
      'title' => t('Administer client types'),
      'description' => t('Create and delete fields for client types, and set their permissions.'),
    ),
    'administer clients' => array(
      'title' => t('Administer clients'),
      'description' => t('Create new clients, and edit and delete all clients.'),
    ),
    'administer own clients' => array(
      'title' => t('Administer own clients'),
      'description' => t('Edit and delete your own clients.'),
    ),
    'create new clients' => array(
      'title' => t('Create new clients'),
    ),
    'view own clients' => array(
      'title' => t('View own clients'),
    ),
  );

  // Generate permissions per client type.
  foreach (client_get_types() as $type) {
    $permissions += array(
      "edit any $type->type client" => array(
        'title' => t('%type_name: Edit any client', array('%type_name' => $type->name)),
      ),
      "view any $type->type client" => array(
        'title' => t('%type_name: View any client', array('%type_name' => $type->name)),
      ),
    );
  }

  return $permissions;
}

/**
 * Implements hook_field_extra_fields().
 */
function client_field_extra_fields() {
  $extra_fields = array();

  foreach (client_get_types() as $client_type) {
    $extra_fields['client'][$client_type->type] = array(
      'form' => array(
        'name' => array(
          'label' => t('Name'),
          'description' => t('The name of the client'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra_fields;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function client_field_widget_form_alter(&$element, &$form_state, $context) {
  // The Addressfield module automatically makes all fields required that are
  // necessary for a valid postal address for a given country. We would like to
  // keep these fields optional.
  // @see https://www.drupal.org/node/2282817
  if ($form_state['build_info']['form_id'] == 'client_edit_form' && $context['field']['type'] == 'addressfield') {
    $element['street_block']['thoroughfare']['#required'] = FALSE;
    $element['locality_block']['dependent_locality']['#required'] = FALSE;
    $element['locality_block']['locality']['#required'] = FALSE;
    $element['locality_block']['administrative_area']['#required'] = FALSE;
    $element['locality_block']['postal_code']['#required'] = FALSE;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function client_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    // Add action link to 'client/add' on the Clients overview.
    case 'clients':
      $item = menu_get_item('client/add');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;

    // Add action link to 'invoice/add' on the Client detail page.
    case 'client/%':
      // This page is managed by Page Manager. The client is part of the CTools
      // context.
      if (!empty($router_item['map'][1]->data) && $router_item['map'][1]->data instanceof Client) {
        // @codingStandardsIgnoreStart
        /** @var Client $client */
        // @codingStandardsIgnoreEnd
        $client = $router_item['map'][1]->data;
        if (client_is_owned_by_user($client)) {
          $item = menu_get_item('invoice/add');
          // Pass the client ID as a query argument so the client can be
          // prepopulated in the invoice form.
          $item['localized_options'] = array(
            'query' => array('cid' => $client->identifier()),
          );
          if ($item['access']) {
            $data['actions']['output'][] = array(
              '#theme' => 'menu_local_action',
              '#link' => $item,
            );
          }
        }
      }
      else {
        throw new Exception('Client not found in detail page.');
      }
      break;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function client_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'access') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Determines whether the given user has access to a client.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param Client $client
 *   Optionally a Client to check access for. If nothing is given, access for
 *   all clients is determined.
 * @param \stdClass $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function client_access($op, Client $client = NULL, \stdClass $account = NULL) {
  global $user;

  // Default to the current user.
  $account = $account ?: $user;

  if (user_access('administer clients', $account)) {
    return TRUE;
  }

  if ($op == 'create') {
    return user_access('create new clients', $account);
  }

  if (!empty($client)) {
    switch ($op) {
      case 'delete':
        // Clients may only be deleted if they are not used in invoices.
        $access = user_access("edit any $client->type client", $account);
        $access |= user_access('administer own clients', $account) && client_is_owned_by_user($client, $account);
        $access &= !client_has_invoices($client);
        return $access;

      case 'edit':
      case 'update':
        $access = user_access("edit any $client->type client", $account);
        $access |= user_access('administer own clients', $account) && client_is_owned_by_user($client, $account);
        return $access;

      case 'view':
        $access = user_access("view any $client->type client", $account);
        $access |= user_access('view own clients', $account) && client_is_owned_by_user($client, $account);
        return $access;
    }
  }

  return FALSE;
}

/**
 * Access callback for Entity API exportables for client types.
 */
function client_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer client types', $account);
}

/**
 * Returns an array of client types, keyed by the type name.
 *
 * @return array
 *   An associative array of client types, keyed by client type.
 */
function client_get_types() {
  $types = &drupal_static(__FUNCTION__);

  if (!$types) {
    $types = db_select('client_type', 'ict')
      ->fields('ict')
      ->execute()
      ->fetchAllAssoc('type');
  }

  return $types;
}

/**
 * Returns a client type by type name.
 *
 * @param string $type
 *   The machine readable name of the client type.
 *
 * @return Entity
 *   A client type entity, or FALSE if the client type does not exist.
 */
function client_type_load($type) {
  $types = client_get_types();

  return !empty($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Returns a list of client type names.
 *
 * @return array
 *   An associative array of client type labels, keyed by client type.
 */
function client_type_get_names() {
  $types = array();

  foreach (client_get_types() as $machine_name => $type) {
    $types[$machine_name] = $type->name;
  }

  return $types;
}

/**
 * Composes the label of a client type.
 *
 * @param object $entity
 *   The entity for which to generate the label.
 * @param string $entity_type
 *   The entity type; e.g., 'node' or 'user'.
 *
 * @return string|bool
 *   The entity label or FALSE if not found.
 *
 * @see entity_label()
 */
function client_type_label($entity, $entity_type) {
  // If the entity type is being created it does not have a name yet.
  if (empty($entity->is_new)) {
    return $entity->name;
  }
  return FALSE;
}

/**
 * Loads clients from the database.
 *
 * This function should be used whenever you need to load more than one client
 * from the database. Clients are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @param array $cids
 *   An array of client IDs.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return Client[]
 *   An array of client objects indexed by cid.
 *
 * @see entity_load()
 * @see EntityFieldQuery
 */
function client_load_multiple(array $cids = array(), $reset = FALSE) {
  return entity_load('client', $cids, array(), $reset);
}

/**
 * Loads a client object from the database.
 *
 * @param int $cid
 *   The client ID.
 * @param bool $reset
 *   Whether to reset the cache.
 *
 * @return Client|FALSE
 *   A fully-populated client object, or FALSE if the client is not found.
 *
 * @throws InvalidArgumentException
 *   Thrown when the passed ID is not valid.
 */
function client_load($cid, $reset = FALSE) {
  $cid = (int) $cid;
  if (empty($cid)) {
    throw new InvalidArgumentException('Invalid client id.');
  }
  $clients = client_load_multiple((array) $cid, $reset);

  return $clients ? reset($clients) : FALSE;
}

/**
 * Deletes a client.
 *
 * @param Client $client
 *   The client to delete.
 */
function client_delete(Client $client) {
  $client->delete();
}

/**
 * Deletes multiple clients.
 *
 * @param array $cids
 *   An array of client IDs.
 */
function client_delete_multiple(array $cids) {
  entity_get_controller('client')->delete($cids);
}

/**
 * Creates a new client entity.
 *
 * @param array $values
 *   An associative array of values to apply to the entity, keyed by property
 *   name.
 *
 * @return Client
 *   The new client entity.
 */
function client_create($values = array()) {
  // Default to the 'client' bundle.
  $values += array('type' => 'client');
  return entity_get_controller('client')->create($values);
}

/**
 * Saves a client to the database.
 *
 * @param Client $client
 *   The client entity.
 *
 * @return mixed
 *   Returns FALSE if the transaction failed. If it succeeded, returns SAVED_NEW
 *   or SAVED_UPDATED, depending on the operation performed.
 */
function client_save(Client $client) {
  $client->is_new_revision = TRUE;
  $client->default_revision = TRUE;
  return $client->save();
}

/**
 * Implements callback_entity_info_uri().
 */
function client_uri(Client $client) {
  return array(
    'path' => 'client/' . $client->cid,
  );
}

/**
 * Title callback: Returns the title of the client.
 *
 * @param Client $client
 *   The client object.
 *
 * @return string
 *   An unsanitized string that is the title of the client.
 *
 * @see client_menu()
 */
function client_page_title(Client $client) {
  return $client->name;
}

/**
 * Creates a client type.
 *
 * @param string $type
 *   The machine readable name of the client type.
 * @param string $name
 *   The human readable name of the client type.
 */
function client_type_create($type, $name) {
  db_insert('client_type')
    ->fields(array(
      'type' => $type,
      'name' => $name,
    ))
    ->execute();

  drupal_static_reset('client_get_types');
  drupal_static_reset('entity_get_info');
}

/**
 * Callback for getting client properties.
 *
 * @see client_entity_property_info()
 */
function client_entity_metadata_get_properties(Client $client, array $options, $name, $entity_type, $info) {
  switch ($name) {
    case 'is_new':
      return empty($client->cid) || !empty($client->is_new);
  }
}

/**
 * Composes the label of a Client.
 *
 * @param Client $entity
 *   The entity for which to generate the label.
 * @param string $entity_type
 *   The entity type; e.g., 'node' or 'user'.
 *
 * @return string|bool
 *   The entity label or FALSE if not found.
 *
 * @see entity_label()
 */
function client_label(Client $entity, $entity_type) {
  return $entity->name;
}

/**
 * Implements hook_form_alter().
 */
function client_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['field_client_website'])) {
    $form['field_client_website']['#element_validate'][] = 'client_validate_website_field';
  }
}

/**
 * Validator for the client_website field.
 */
function client_validate_website_field($element, &$form_state) {
  if (!empty($form_state['values']['field_client_website'][LANGUAGE_NONE][0]['url']) && !url_is_external($form_state['values']['field_client_website'][LANGUAGE_NONE][0]['url'])) {
    form_error($element, t('The "!name" must be an external path', array('!name' => t('Website'))));
  }
}

/**
 * Returns whether a given client is owned by a given user.
 *
 * @param Client $client
 *   The client to check.
 * @param \stdClass $account
 *   Optional user account to check. Defaults to the currently logged in user.
 *
 * @return bool
 *   TRUE if the client is owned by the user, FALSE otherwise.
 */
function client_is_owned_by_user(Client $client, \stdClass $account = NULL) {
  // Default to the logged in user.
  global $user;
  $account = $account ?: $user;

  return in_array($client->bid, array_keys(business_get_businesses_from_user($account)));
}

/**
 * Returns whether the client is used in any invoices.
 *
 * @param Client $client
 *   The client to check.
 *
 * @return bool
 *   TRUE if the client is used in invoices, FALSE otherwise.
 */
function client_has_invoices(Client $client) {
  return (bool) client_get_invoice_ids($client);
}

/**
 * Returns the invoices that are issued for the given client.
 *
 * @param Client $client
 *   The client for which to retrieve the invoices.
 *
 * @return Invoice[]
 *   An array of invoices.
 */
function client_get_invoices(Client $client) {
  return entity_load('invoice', client_get_invoice_ids($client));
}

/**
 * Returns the ids of the invoices that are issued for the given client.
 *
 * @param Client $client
 *   The client for which to retrieve the invoices.
 *
 * @return array
 *   An array of invoice ids.
 */
function client_get_invoice_ids(Client $client) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'invoice')
    ->fieldCondition('field_invoice_client', 'target_id', $client->identifier());
  $result = $query->execute();
  return isset($result['invoice']) ? array_keys($result['invoice']) : array();
}

/**
 * The class used for client entities.
 *
 * @param array field_client_address
 * @param array field_client_email
 * @param array field_client_notes
 * @param array field_client_phone
 * @param array field_client_shipping_address
 * @param array field_client_vat
 * @param array field_client_website
 */
class Client extends Entity {

  /**
   * The primary identifier for a client.
   *
   * @var int
   */
  public $cid;

  /**
   * The type of this client.
   *
   * @var string
   */
  public $type;

  /**
   * The name of the client.
   *
   * @var string
   */
  public $name;

  /**
   * The id of the business to which the client belongs.
   *
   * @var int
   */
  public $bid;

  /**
   * The Unix timestamp when the client was created.
   *
   * @var int
   */
  public $created;

  /**
   * The Unix timestamp when the client was most recently saved.
   *
   * @var int
   */
  public $changed;

  /**
   * {@inheritdoc}
   */
  public function save() {
    // Set created and changed values. Only set the created value if it is new.
    if (empty($this->created) && (!empty($this->is_new) || !$this->cid)) {
      $this->created = REQUEST_TIME;
    }
    $this->changed = REQUEST_TIME;

    return parent::save();
  }

}

/**
 * The Client Entity API controller class.
 */
class ClientAPIController extends EntityAPIController {

  /**
   * {@inheritdoc}
   */
  public function create(array $values = array()) {
    // Set the business id to the active business of the logged in user.
    $business = business_get_active_business();
    if ($business instanceof Business) {
      $values += array('bid' => $business->bid);
    }
    return parent::create($values);
  }

}

/**
 * The Client Inline Entity Form controller class.
 */
class ClientInlineEntityFormController extends EntityInlineEntityFormController {

  /**
   * {@inheritdoc}
   */
  public function entityForm($entity_form, &$form_state) {
    $client = $entity_form['#entity'];
    $extra_fields = field_info_extra_fields('client', $client->type, 'form');

    $entity_form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#required' => TRUE,
      '#default_value' => $client->name,
      '#maxlength' => 255,
      '#weight' => !empty($extra_fields['name']) ? $extra_fields['name']['weight'] : -5,
    );

    $langcode = entity_language('client', $client);
    field_attach_form('client', $client, $entity_form, $form_state, $langcode);

    return $entity_form;
  }

}
