<?php

/**
 * @file
 * Install, uninstall, update and schema hooks for Invoicing Invoice.
 */

/**
 * Implements hook_schema().
 */
function invoice_schema() {
  $schema = array();

  $schema['invoice'] = array(
    'description' => 'The base table for Invoice entities.',
    'fields' => array(
      'iid' => array(
        'description' => 'The primary identifier for an invoice.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {invoice_type}.type of this invoice.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'bid' => array(
        'description' => 'The business that issues the invoice.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the invoice was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the invoice was most recently saved.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('iid'),
    'foreign keys' => array(
      'bid' => array(
        'table' => 'business',
        'columns' => array('bid' => 'bid'),
      ),
    ),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  $schema['invoice_type'] = array(
    'description' => 'Stores information about defined invoice types.',
    'fields' => array(
      'type' => array(
        'description' => 'The machine-readable name of this invoice type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this invoice type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('type'),
  );

  return $schema;
}
