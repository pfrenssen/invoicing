<?php

/**
 * @file
 * Unit tests for the Business module.
 */

class BusinessUnitTestCase extends BusinessWebTestCase {

  /**
   * Test user accounts.
   *
   * @var array
   *   An array of user objects.
   */
  protected $users;

  /**
   * Test business entities.
   *
   * @var Business[]
   *   An array of Business entities.
   */
  protected $businesses;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Unit test',
      'description' => 'Unit tests for the business module.',
      'group' => 'Business',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setup('business');

    // Create some test users.
    for ($i = 0; $i < 3; $i++) {
      $this->users[$i] = $this->drupalCreateUser();
    }
  }

  /**
   * Tests the business field in the user edit form.
   */
  public function testBusinessGetBusinessesFromUser() {
    // Link a business to two of the users, but not to the third.
    foreach ($this->users as $key => $user) {
      if ($key == 2) {
        break;
      }
      $this->businesses[$key] = $this->createBusiness();
      $this->businesses[$key]->save();
      $user->field_user_businesses[LANGUAGE_NONE][]['target_id'] = $this->businesses[$key]->bid;
      user_save($user);
    }

    // Verify that the business_get_businesses_from_user() works correctly.
    // The first business should be linked to the first user.
    $this->assertBusinessGetBusinessFromUser($this->users[0]->uid, array($this->businesses[0]->bid));

    // The second business should be linked to the second user.
    $this->assertBusinessGetBusinessFromUser($this->users[1]->uid, array($this->businesses[1]->bid));

    // The third user should not have any businesses.
    $this->assertBusinessGetBusinessFromUser($this->users[2]->uid);

    // Check that the businesses owned by the global $user are returned by
    // default.
    global $user;
    for ($i = 0; $i < 2; $i++) {
      $user = user_load($this->users[$i]->uid);
      $this->assertBusinessGetBusinessFromUser(NULL, array($this->businesses[$i]->bid));
    }
  }

  /**
   * Checks the output of business_get_businesses_from_user().
   *
   * @param int $uid
   *   The user id to pass to the function.
   * @param array $bids
   *   An array of business ids which represent the businesses that are expected
   *   to be returned.
   */
  protected function assertBusinessGetBusinessFromUser($uid = NULL, $bids = array()) {
    $businesses = business_get_businesses_from_user($uid);
    $this->assertEqual(count($businesses), count($bids), 'The user has been linked to correct number of businesses.');
    $keys = array_keys($businesses);
    $this->assertEqual($keys, $bids, 'The correct array keys are used.');

    foreach ($businesses as $business) {
      $this->assertTrue($business instanceof Business, 'An array of Business entities is returned.');
      $key = array_shift($bids);
      $this->assertEqual($key, $business->bid, 'The correct Business entities are returned.');
    }
  }

}
