<?php

/**
 * @file
 * Contains \ClientSubContext.
 */

use Behat\Gherkin\Node\TableNode;
use Drupal\DrupalExtension\Context\DrupalSubContextBase;
use Drupal\DrupalExtension\Context\DrupalSubContextInterface;

/**
 * Behat step definitions for testing clients.
 */
class ClientSubContext extends DrupalSubContextBase implements DrupalSubContextInterface {

  use Drupal\invoicing\Traits\BaseTestHelper;
  use Drupal\invoicing\Traits\ClientTestHelper;

  /**
   * Test clients.
   *
   * @var Client[]
   */
  public $clients = array();

  /**
   * A test client website URL.
   *
   * @var string
   */
  protected $clientWebsiteUrl;

  /**
   * Creates clients with data provided in a table.
   *
   * Table format:
   * | name    | email           |
   * | Axemill | info@axemill.eu |
   *
   * @param TableNode $clients_table
   *   The client data.
   *
   * @throws \Exception
   *   Thrown when no user is logged in.
   *
   * @Given client(s):
   */
  public function createClients(TableNode $clients_table) {
    if (!$this->getuser()->uid) {
      throw new \Exception('There is no current logged in user to create clients for.');
    }

    $user = entity_metadata_wrapper('user', user_load($this->getUser()->uid));
    $businesses = $user->field_user_businesses->value();

    if (empty($businesses)) {
      throw new \Exception('Cannot create clients, the currently logged in user has no business.');
    }

    foreach ($clients_table->getHash() as $client_hash) {
      $client = $this->createClient(array(
        'bid' => $businesses[0]->identifier(),
        'name' => $client_hash['name'],
        'field_client_email' => $client_hash['email'],
      ));
      client_save($client);
      $this->clients[$client_hash['name']] = $client;
    }
  }

  /**
   * Checks the number of clients that the currently logged in user has.
   *
   * @param int $count
   *   The number of clients the logged in user is supposed to have.
   *
   * @throws \Exception
   *   Thrown when the user is not logged in.
   *
   * @Then I should have :count client(s)
   */
  public function assertClientCount($count) {
    if (!$this->getUser()->uid) {
      throw new \Exception('The user is not logged in.');
    }

    $user = user_load($this->getUser()->uid);
    $cids = client_get_client_ids_from_user($user, TRUE);
    PHPUnit_Framework_Assert::assertEquals($count, count($cids));
  }

  /**
   * Saves a client website URL for later use.
   *
   * @param string $url
   *   The client website URL.
   *
   * @Given a client with website :url
   */
  public function setClientWebsiteUrl($url) {
    $this->clientWebsiteUrl = $url;
  }

  /**
   * Asserts that the stored client website URL is valid.
   *
   * The URL should have been set in a previous step.
   *
   * @see setClientWebsiteUrl()
   *
   * @Then the client website should be valid
   */
  public function assertClientWebsiteValid() {
    $this->assertClientWebsiteValidity();
  }

  /**
   * Asserts that the client website URL is invalid.
   *
   * The URL should have been set in a previous step.
   *
   * @see setClientWebsiteUrl()
   *
   * @Then the client website should be invalid
   */
  public function assertClientWebsiteInvalid() {
    $this->assertClientWebsiteValidity(FALSE);
  }

  /**
   * Asserts if a website URL is valid or not.
   *
   * The URL should have been set in a previous step.
   *
   * @see setClientWebsiteUrl()
   *
   * @param bool $valid
   *   Whether or not the website URL is expected to be valid.
   */
  protected function assertClientWebsiteValidity($valid = TRUE) {
    // Create a fake form element and form state.
    $element = ['#parents' => []];
    $form_state = form_state_defaults();

    // Inject the website URL in the form state.
    $form_state['values']['field_client_website'][LANGUAGE_NONE][0]['url'] = $this->clientWebsiteUrl;

    // Run the form validate handler.
    client_validate_website_field($element, $form_state);

    // Retrieve the form errors that were generated by the validate handler.
    $errors = form_get_errors();

    // Clear the form error cache.
    form_clear_error();

    if ($valid) {
      PHPUnit_Framework_Assert::assertNull($errors, 'The website URL is valid.');
    }
    else {
      PHPUnit_Framework_Assert::assertNotNull($errors, 'The website URL is invalid.');
    }
  }

  /**
   * Remove any created clients.
   *
   * @AfterScenario
   */
  public function cleanClients() {
    // Remove any clients that were created.
    foreach ($this->clients as $client) {
      client_delete($client);
    }
  }

}
