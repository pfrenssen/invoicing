<?php

/**
 * @file
 * Contains \InvoiceOverviewTestCase.
 */

invoicing_core_autoload();

/**
 * Tests the invoice overview.
 */
class InvoiceOverviewTestCase extends InvoicingIntegrationTestCase {

  use \Drupal\invoicing\Traits\BaseTestHelper;
  use \Drupal\invoicing\Traits\InvoiceTestHelper;
  use \Drupal\invoicing\Traits\LineItemTestHelper;

  /**
   * Test businesses.
   *
   * @var Business[]
   */
  protected $businesses;

  /**
   * Test clients.
   *
   * @var Client[]
   */
  protected $clients;

  /**
   * An array of test invoices.
   *
   * @var array
   */
  protected $invoices;

  /**
   * {@inheritdoc}
   */
  protected $usersToCreate = array(
    'administrator',
    'business owner',
  );

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Overview test',
      'description' => 'Tests the invoices overview.',
      'group' => 'Invoicing - Invoice',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();

    // Create a line item of each type so they can be referenced in invoices.
    $this->createLineItem('product')->save();
    $this->createLineItem('service')->save();
  }

  /**
   * Tests the invoice overview.
   */
  public function testOverview() {
    // Log in as business owner.
    $this->drupalLogin($this->users['business owner']);

    // Create some test clients.
    for ($i = 0; $i < 5; $i++) {
      $this->createUIClient();
    }

    // Create a number of test invoices.
    for ($i = 0; $i < 20; $i++) {
      $invoice = $this->createUiInvoice();
      $this->invoices[$invoice->iid] = $invoice;
    }

    // Go to the invoice overview.
    $this->drupalGet('invoices');

    // Check that the "Add invoice" local action is present.
    $xpath = '//ul[@class="action-links"]/li/a[@href="/invoice/add" and contains(text(), :text)]';
    $this->assertXPathElements($xpath, 1, array(':text' => t('Add invoice')), 'The "Add invoice" local action is present.');

    // Check that the pager is not present. We added 20 invoices which is the
    // maximum number that fits on one page.
    $this->assertNoPager();

    // Loop over the displayed table rows and compare them with each invoice in
    // order.
    $tablerows = $this->xpath('//div[contains(@class, "view-invoices")]//table//tbody/tr');
    foreach ($tablerows as $tablerow) {
      /* @var $tablerow SimpleXMLElement */
      /* @var $invoice EntityDrupalWrapper */
      $invoice = entity_metadata_wrapper('invoice', array_shift($this->invoices));
      $client = $invoice->field_invoice_client->value();
      $testcases = array(
        array(
          'message' => 'The first column contains the invoice number.',
          'expected' => $invoice->field_invoice_number->value(),
          'actual' => (string) $tablerow->td[0]->a,
        ),
        array(
          'message' => 'The first column is linked to the invoice detail page.',
          'expected' => '/invoice/' . $invoice->getIdentifier(),
          'actual' => (string) $tablerow->td[0]->a['href'],
        ),
        array(
          'message' => 'The second column contains the client.',
          'expected' => $client->name,
          'actual' => (string) $tablerow->td[1]->a,
        ),
        array(
          'message' => 'The second column is linked to the client detail page.',
          'expected' => '/client/' . $client->cid,
          'actual' => (string) $tablerow->td[1]->a['href'],
        ),
        array(
          'message' => 'The third column contains the date.',
          'expected' => format_date($invoice->field_invoice_date->value(), 'custom', 'l, F j, Y'),
          'actual' => (string) $tablerow->td[2]->span[0],
        ),
      );

      foreach ($testcases as $testcase) {
        $this->assertEqual(trim($testcase['expected']), trim($testcase['actual']), $testcase['message']);
      }
    }

    // Check that all invoices were displayed.
    $this->assertFalse($this->invoices, 'All invoices are shown in the table.');

    // Add one more invoice and assert that a pager now appears.
    $this->createUIInvoice();
    $this->drupalGet('invoices');
    $this->assertPager();

    // Create a different user with the role business owner and verify it does
    // not see the invoices created by another business owner.
    $business_owner = $this->drupalCreateUserWithRole('business owner');
    $business = $this->createBusiness();
    $business->save();
    $this->addBusinessToUser($business, $business_owner);
    $this->drupalLogin($business_owner);

    $this->drupalGet('invoices');
    // Check that the "Add invoice" local action is present.
    $xpath = '//ul[@class="action-links"]/li/a[@href="/invoice/add" and contains(text(), :text)]';
    $this->assertXPathElements($xpath, 1, array(':text' => t('Add invoice')), 'The "Add invoice" local action is present.');
    $this->assertFalse($this->xpath('//div[contains(@class, "view-invoices")]//table'), 'The table containing invoices is not shown when no invoice is linked to the user.');
    $this->assertTrue($this->xpath('//div[contains(@class, "view-invoices")]//div[contains(@class, "view-empty")]'), 'The no results message is shown.');
  }

  /**
   * Tests the invoice overview for administrators.
   */
  public function testAdministratorOverview() {
    // Log in as administrator.
    $this->drupalLogin($this->users['administrator']);

    // Create 2 business owners, each owning a business with 2 clients, with 2
    // invoices each.
    for ($i = 0; $i < 2; $i++) {
      $user = $this->drupalCreateUserWithRole('business owner');
      $business = $this->createBusiness();
      $business->save();
      $this->addBusinessToUser($business, $user);
      $this->users[] = $user;
      $this->businesses[] = $business;
      for ($j = 0; $j < 2; $j++) {
        $client = $this->createClient(array('bid' => $business->identifier()));
        $client->save();
        $this->clients[] = $client;
        for ($k = 0; $k < 2; $k++) {
          $invoice = $this->createInvoice(array(
            'bid' => $business->identifier(),
            'field_invoice_client' => $client,
          ));
          $invoice->save();
          $this->invoices[] = $invoice;
        }
      }
    }

    // Go to the invoice overview.
    $this->drupalGet('invoices');

    // Check that the "Add invoice" local action is not present. Administrators
    // cannot create invoices.
    $xpath = '//ul[@class="action-links"]/li/a[@href="/invoice/add" and contains(text(), :text)]';
    $this->assertXPathElements($xpath, 0, array(':text' => t('Add invoice')), 'The "Add invoice" local action is not present.');

    // Loop over the displayed table rows and compare them with each invoice in
    // order.
    $tablerows = $this->xpath('//div[contains(@class, "view-invoices")]//table//tbody/tr');
    foreach ($tablerows as $tablerow) {
      /* @var $tablerow SimpleXMLElement */
      /* @var $invoice EntityDrupalWrapper */
      /* @var $business Business */
      $invoice = entity_metadata_wrapper('invoice', array_shift($this->invoices));
      $business = $invoice->bid->value();
      $client = $invoice->field_invoice_client->value();
      $testcases = array(
        array(
          'message' => 'The first column contains the business name.',
          'expected' => $business->name,
          'actual' => (string) $tablerow->td[0]->a,
        ),
        array(
          'message' => 'The first column is linked to the business.',
          'expected' => '/business/' . $business->identifier(),
          'actual' => (string) $tablerow->td[0]->a['href'],
        ),
        array(
          'message' => 'The second column contains the invoice number.',
          'expected' => $invoice->field_invoice_number->value(),
          'actual' => (string) $tablerow->td[1]->a,
        ),
        array(
          'message' => 'The second column is linked to the invoice detail page.',
          'expected' => '/invoice/' . $invoice->getIdentifier(),
          'actual' => (string) $tablerow->td[1]->a['href'],
        ),
        array(
          'message' => 'The third column contains the client.',
          'expected' => $client->name,
          'actual' => (string) $tablerow->td[2]->a,
        ),
        array(
          'message' => 'The third column is linked to the client detail page.',
          'expected' => '/client/' . $client->cid,
          'actual' => (string) $tablerow->td[2]->a['href'],
        ),
        array(
          'message' => 'The fourth column contains the date.',
          'expected' => format_date($invoice->field_invoice_date->value(), 'custom', 'l, F j, Y'),
          'actual' => (string) $tablerow->td[3]->span[0],
        ),
      );

      foreach ($testcases as $testcase) {
        $this->assertEqual(trim($testcase['expected']), trim($testcase['actual']), $testcase['message']);
      }
    }

    // Check that all invoices were displayed.
    $this->assertFalse($this->invoices, 'All invoices are shown in the table.');
  }

  /**
   * Tests the client invoice overview.
   */
  public function testClientInvoiceOverview() {
    // Log in as business owner.
    $this->drupalLogin($this->users['business owner']);

    // Create some test clients.
    for ($i = 0; $i < 2; $i++) {
      $this->clients[$i] = $this->createUIClient();
    }

    // Create a number of test invoices for the first client.
    $values = array('field_invoice_client' => $this->clients[0]);
    for ($i = 0; $i < 20; $i++) {
      $invoice = $this->createUiInvoice($values);
      $this->invoices[$invoice->iid] = $invoice;
    }

    // Create a single invoice for the second client.
    $values = array('field_invoice_client' => $this->clients[1]);
    $this->createUiInvoice($values);

    // Go to the detail page of the first client.
    $this->drupalGet('client/' . $this->clients[0]->identifier());

    // Check that the 'Invoices' title is present.
    $this->assertXPathElements('//h2[normalize-space(text())=:text]', 1, array(':text' => t('Invoices')), 'The title of the overview is present.');

    // Check that the pager is not present. We added 20 invoices which is the
    // maximum number that fits on one page.
    $this->assertNoPager();

    // Loop over the displayed table rows and compare them with each invoice in
    // order.
    $tablerows = $this->xpath('//div[contains(@class, "view-invoices")]//table//tbody/tr');
    foreach ($tablerows as $tablerow) {
      /* @var $tablerow SimpleXMLElement */
      /* @var $invoice EntityDrupalWrapper */
      $invoice = entity_metadata_wrapper('invoice', array_shift($this->invoices));
      $testcases = array(
        array(
          'message' => 'The first column contains the invoice number.',
          'expected' => $invoice->field_invoice_number->value(),
          'actual' => (string) $tablerow->td[0]->a,
        ),
        array(
          'message' => 'The first column is linked to the invoice detail page.',
          'expected' => '/invoice/' . $invoice->getIdentifier(),
          'actual' => (string) $tablerow->td[0]->a['href'],
        ),
        array(
          'message' => 'The second column contains the date.',
          'expected' => format_date($invoice->field_invoice_date->value(), 'custom', 'l, F j, Y'),
          'actual' => (string) $tablerow->td[1]->span[0],
        ),
      );

      foreach ($testcases as $testcase) {
        $this->assertEqual(trim($testcase['expected']), trim($testcase['actual']), $testcase['message']);
      }
    }

    // Check that all invoices were displayed.
    $this->assertFalse($this->invoices, 'All invoices are shown in the table.');

    // Add one more invoice and assert that a pager now appears.
    $values = array('field_invoice_client' => $this->clients[0]);
    $this->createUIInvoice($values);
    $this->drupalGet('invoices');
    $this->assertPager();

    // Go to the detail page of the second client and check it contains only one
    // invoice.
    $this->drupalGet('client/' . $this->clients[1]->identifier());
    $this->assertXPathElements('//div[contains(@class, "view-invoices")]//table//tbody/tr', 1, array(), 'The invoice overview on the detail page of the second client only contains one invoice.');
  }

}
